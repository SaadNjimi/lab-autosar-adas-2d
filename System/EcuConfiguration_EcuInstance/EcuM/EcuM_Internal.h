/**************************************************************************************************\
***
*** System              : AR_Fuelsys_1Ecu
*** ECU                 : Controller
*** Configuration       : ControllerEcuConfiguration
*** Codefile            : EcuM.h
***
*** Generated by SystemDesk 5.1.0.10207
*** Generation date: 2017-10-24 08:33:52
***
*** Copyright (c) 2017 dSPACE GmbH
\**************************************************************************************************/

#ifndef ECUM_INTERNAL_H
#define ECUM_INTERNAL_H

/*------------------------------------------------------------------------------------------------*\
DEFINES (OPT)
\*------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------*\
INCLUDES
\*------------------------------------------------------------------------------------------------*/
#include "EcuM_Cfg.h"
#include "EcuM_Types.h"
#include "EcuM_Cbk.h"

#if (ECUM_INCLUDE_NVM == STD_ON)
#include "NvM.h"
#endif

/*------------------------------------------------------------------------------------------------*\
DEFINES
\*------------------------------------------------------------------------------------------------*/
#if (ECUM_DEV_ERROR_DETECT == STD_ON)
#define EcuM_Det_ReportError(ServiceId, ErrorId) Det_ReportError(ECUM_MODULE_ID, 0, ServiceId, ErrorId);
#else
#define EcuM_Det_ReportError(ServiceId, ErrorId) ECUM_UNUSED_PARAMETER(ServiceId); ECUM_UNUSED_PARAMETER(ErrorId);
#endif

#ifndef EcuMConf_EcuMSleepMode_LENGTH
#define EcuMConf_EcuMSleepMode_LENGTH 0
#endif

#ifndef EcuMConf_EcuMWakeupSource_LENGTH
#define EcuMConf_EcuMWakeupSource_LENGTH 0
#endif

#ifndef EcuMConf_EcuMFixedUserConfig_LENGTH
#define EcuMConf_EcuMFixedUserConfig_LENGTH 0
#endif

#ifndef ECUM_UNUSED_PARAMETER
#define ECUM_UNUSED_PARAMETER(param) ((void)param)
#endif

/*------------------------------------------------------------------------------------------------*\
Development Errors
\*------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------*\
Runtime Errors
\*------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------*\
Transient Faults
\*------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------*\
PARAMETERIZED MACROS
\*------------------------------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C" {
#endif

/*------------------------------------------------------------------------------------------------*\
TYPEDEFS
\*------------------------------------------------------------------------------------------------*/

/* Default shutdown target type. */
typedef struct
{
    EcuM_StateType state;
    uint8 mode;
} EcuM_ShutdownTargetType;

typedef struct
{
    EcuM_WakeupSourceType Enabled;
    EcuM_WakeupSourceType Pending;
    EcuM_WakeupSourceType Valid;
    EcuM_WakeupSourceType Expired;
    EcuM_TimeoutType CurrentTimeouts[EcuMConf_EcuMWakeupSource_LENGTH];
} EcuM_WakeupSourceStatusType;

/*------------------------------------------------------------------------------------------------*\
VARIABLE DECLARATIONS
\*------------------------------------------------------------------------------------------------*/
extern EcuM_ConfigType EcuM_DefaultPBConfig;
extern const EcuM_ConfigType* EcuM_PostBuildConfiguration;
#if (ECUM_INCLUDE_NVM == STD_ON)
extern volatile boolean EcuM_NvMCbReceived;
#endif
extern EcuM_StateType EcuM_CurrentState;
extern uint8 EcuM_CurrentNumberOfRunRequests;
extern uint8 EcuM_CurrentNumberOfPostRunRequests;
extern EcuM_ShutdownTargetType EcuM_ShutdownTarget;
extern volatile EcuM_WakeupSourceType EcuM_CurrentWakeupEvent; 
extern EcuM_WakeupSourceStatusType EcuM_WakeupSourceStatus;
extern EcuM_InitListType EcuM_InitListZero;
extern boolean EcuM_UseMinimumMode;
extern EcuM_TimeoutType EcuM_RunRequestTimeout;
extern boolean EcuM_AllRunRequestsKilled;


/*------------------------------------------------------------------------------------------------*\
FUNCTION PROTOTYPES
\*------------------------------------------------------------------------------------------------*/
extern void EcuM_DoStartupI(void);
extern void EcuM_DoStartupII(void);
extern void EcuM_DoEnterRun(void);
extern void EcuM_DoRunII(void);
extern void EcuM_DoRunIII(void);
extern void EcuM_DoPrepShutdown(void);
extern void EcuM_DoGoOffI(void);
extern void EcuM_DoGoOffII(void);
extern void EcuM_DoGoSleep(void);
extern void EcuM_DoSleepI(void);
extern void EcuM_DoSleepII(void);
extern void EcuM_DoWakeupI(void);
extern void EcuM_DoWakeupValidation(void);
extern void EcuM_DoWakeupReaction(void);
extern void EcuM_DoWakeupII();

extern void EcuM_InitializeList(const EcuM_InitListType* initList);
extern Std_ReturnType EcuM_CheckInitialized(uint8 ServiceId);
extern Std_ReturnType EcuM_CheckValidShutdownTarget(uint8 ServiceId, EcuM_StateType target);
extern Std_ReturnType EcuM_CheckNullPtr(uint8 ServiceId, void* Ptr);

void EcuM_SwitchState(EcuM_StateType nextState, boolean switchApplicationState);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ECUM_INTERNAL_H */
  /*------------------------------------------------------------------------------------------------*\
  END OF FILE
  \*------------------------------------------------------------------------------------------------*/
