/**************************************************************************************************\
 *** Os_Types.h
 ***
 *** This file contains data type definitions for the AUTOSAR OS module.
 ***
 *** Generated by dSPACE SystemDesk
 ***
 *** Copyright 2020, dSPACE GmbH. All rights reserved.
\**************************************************************************************************/

#ifndef OS_TYPES_H
#define OS_TYPES_H

/*------------------------------------------------------------------------------------------------*\
  INCLUDES
\*------------------------------------------------------------------------------------------------*/
#include "Platform_Types.h"
#include "Std_Types.h"
/*------------------------------------------------------------------------------------------------*\
  TYPEDEFS
\*------------------------------------------------------------------------------------------------*/

/* Task */
typedef enum {
    SUSPENDED,
    READY,
    RUNNING,
    WAITING
}TaskStateType;

typedef sint32             TaskType;
typedef TaskType*          TaskRefType;
typedef TaskStateType*     TaskStateRefType;

/* Event */
typedef uint64             EventMaskType;
typedef EventMaskType*     EventMaskRefType;

/* Counter */
typedef sint32             CounterType;
typedef uint32             TickType;
typedef TickType*          TickRefType;
typedef uint64             PhysicalTimeType;

/* Alarm */
typedef sint32             AlarmType;
typedef void (*AlarmCallbackType)(void);
typedef struct{
    TickType maxallowedvalue;
    TickType ticksperbase;
    TickType mincycle;
}AlarmBaseType;
typedef AlarmBaseType*     AlarmBaseRefType;

/* Mode */
typedef uint8              AppModeType;

/* Resource */
typedef sint32             ResourceType;

/* Schedule Table */
typedef sint32 ScheduleTableType;
typedef enum {
    SCHEDULETABLE_STOPPED,
    SCHEDULETABLE_NEXT,
    SCHEDULETABLE_WAITING,
    SCHEDULETABLE_RUNNING,
    SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS
}ScheduleTableStatusType;
typedef ScheduleTableStatusType* ScheduleTableStatusRefType;

/* Protection */
typedef enum {
    PRO_IGNORE,
    PRO_TERMINATETASKISR,
    PRO_TERMINATEAPPL,
    PRO_TERMINATEAPPL_RESTART,
    PRO_SHUTDOWN
}ProtectionReturnType;

/* Interrupt */
typedef sint32  ISRType;

/* Application */
typedef uint32 ApplicationType;
typedef uint8 RestartType;


typedef enum{
    APPLICATION_ACCESSIBLE,
	APPLICATION_RESTARTING,
	APPLICATION_TERMINATED
}ApplicationStateType;
typedef ApplicationStateType* ApplicationStateRefType;

/* Trusted Functions */

typedef sint32 TrustedFunctionIndexType;
typedef void*  TrustedFunctionParameterRefType;

/* Object Access */
typedef uint8 ObjectAccessType;
typedef enum{
    OBJECT_TASK,
    OBJECT_ISR,
    OBJECT_ALARM,
    OBJECT_RESOURCE,
    OBJECT_COUNTER,
    OBJECT_SCHEDULETABLE
}ObjectTypeType;

/* Core */
typedef sint32 CoreIdType;
typedef sint32 IdleModeType;

/* Spinlock */
typedef sint32 SpinlockIdType;
typedef enum{
	TRYTOGETSPINLOCK_SUCCESS,
	TRYTOGETSPINLOCK_NOSUCCESS
}TryToGetSpinlockType;

/* Peripheral */
typedef sint32 AreaIdType;

typedef enum{
	ACCESS_READABLE = 0x1,
	ACCESS_WRITEABLE = 0x2,
	ACCESS_EXECUTABLE = 0x4,
	ACCESS_STACKSPACE = 0x8
}AccessType;

typedef uint64 MemorySizeType;
typedef uint8* MemoryStartAddressType;

#endif /* OS_TYPES_H */

/**************************************************************************************************\
 *** END OF FILE
\**************************************************************************************************/
