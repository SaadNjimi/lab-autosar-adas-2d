/**************************************************************************************************\
 *** 
 *** System              : System
 *** ECU                 : EcuInstance
 *** Configuration       : EcucValueCollection
 *** Codefile            : RteIv.h
 ***
 *** Generated by the SystemDesk RTE code generator
 *** Generation date: 2025-06-11 08:50:23
 ***
 *** SystemDesk version  : 5.6.0.13023
 *** Copyright (c) 2016 dSPACE GmbH
\**************************************************************************************************/

#ifndef RTEIV_H
#define RTEIV_H

/*----------------------------------------------------------------------------*\
  DEFINES (OPT)
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
  INCLUDES
\*----------------------------------------------------------------------------*/

#include "Rte_Type.h"
/*----------------------------------------------------------------------------*\
  DEFINES
\*----------------------------------------------------------------------------*/

#define RTE_IP_0 0x10001 
#define RTE_IP_1 0x20002 
#define RTE_IP_2 0x30003 
#define RTE_IP_3 0x40004 
#define RTE_IP_4 0x5 
#define RTE_IP_5 0x6 
#define RTE_IP_6 0x7 
#define RTE_IP_7 0x8 
#define RTE_IP_8 0x60009 
#define RTE_IP_9 0x5000a 
#ifndef RTE_IP_SCALING_MACROS
#define RTE_IP_SCALING_MACROS 

/* macro to round floating point values */
#define RTE_IP_ROUND_FP(_p) ((_p == 0.0) ? (0.0) : ((_p > 0.0) ? (_p + 0.5) : (_p - 0.5))) 


/* macro to scale from floating point to integer */
#define RTE_IP_SCALE_FP_FX(_type, _in, _lsb, _offset) (_type) (RTE_IP_ROUND_FP((_in - (float64)\
 _offset) / (float64) _lsb)) 


/* macro to scale from integer to floating point */
#define RTE_IP_SCALE_FX_FP(_out, _lsb, _offset) ((float64) _out * (float64) _lsb + (float64)\
 _offset) 

#endif 
#define RTE_IP_ELEMENT_INDEX(id, size) (((id & 0xffff) % size)) 

#define RTE_IP_SERVICE_INDEX(id) (((id & 0xffff0000) >> 16) - 1) 

#define RTE_IP_SERVICE_AVAILABLE(id) (0 < (id & 0xffff0000)) 

#define RTE_IP_CALLBACK_REGISTERED (Rte_IvCallback != 0 ) 
#define RTE_IP_N_SERVICES_WITHOUT_DAP 0x0U 
#define RTE_IP_N_SERVICES_WITH_DAP 0x6U 
#define RTE_IP_CALL_BY_CALLBACK(id) (RTE_IP_SERVICE_INDEX(id) >= RTE_IP_N_SERVICES_WITHOUT_DAP) 

#define RTE_IP_READ(id, dataType, value) (Rte_IpReadWrite_##dataType(id,value)) 

#define RTE_IP_READ_D(id1, id2, dataType, value) (Rte_IpReadWrite_##dataType(id2,Rte_IpReadWrite_##\
dataType(id1,value))) 

#define RTE_IP_READ_V(id, index, dataType, value) (Rte_IpReadWrite_##dataType(id + index ,value)) 

#define RTE_IP_READ_VD(id1, id2, index, dataType, value) (Rte_IpReadWrite_##dataType(id2 + index ,\
 Rte_IpReadWrite_##dataType(id1 + index ,value))) 

#define RTE_IP_WRITE(id, dataType, value) (Rte_IpReadWrite_##dataType(id,value)) 

#define RTE_IP_WRITE_D(id1, id2, dataType, value) (Rte_IpReadWrite_##dataType(id2,Rte_IpReadWrite_##\
dataType(id1,value))) 

#define RTE_IP_WRITE_V(id, index, dataType, value) (Rte_IpReadWrite_##dataType(id + index ,value)) 

#define RTE_IP_WRITE_VD(id1, id2, index, dataType, value) (Rte_IpReadWrite_##dataType(id2 + index ,\
 Rte_IpReadWrite_##dataType(id1 + index ,value))) 

#define RTE_IP_STATUS(id, value) (Rte_IpStatus(id,value)) 

/*----------------------------------------------------------------------------*\
  TYPEDEFS
\*----------------------------------------------------------------------------*/

typedef void (*Rte_IvServiceType)(uint32, void *);
typedef struct {
   uint32 id;
   void * value;
   Rte_IvServiceType service;
} Rte_IvServiceCallType;
/*----------------------------------------------------------------------------*\
  ENUMS
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
  VARIABLES
\*----------------------------------------------------------------------------*/

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */ 


/******************************************************************************\
   CONST_UNSPECIFIED: global or static constants (ROM) | Width: N.A.
\******************************************************************************/
extern const Rte_IvServiceType Rte_IvServices[6];

/******************************************************************************\
   VAR_UNSPECIFIED: global or static variables (RAM) | Width: N.A.
\******************************************************************************/
extern Rte_IvServiceType Rte_IvCallback;
#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */ 

/*----------------------------------------------------------------------------*\
  PARAMETERIZED MACROS
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
  FUNCTION PROTOTYPES
\*----------------------------------------------------------------------------*/


/* API functions */
#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */ 

extern void Rte_IvsEcuFlatViewPrototype_SensorSWC_TargetSpeedButtonState_OutputService(uint32 id,
  void * value);
extern void Rte_IvsEcuFlatViewPrototype_SensorSWC_AcceleratorPedal_OutputService(uint32 id, void *
  value);
extern void Rte_IvsEcuFlatViewPrototype_SensorSWC_BrakePedal_OutputService(uint32 id, void * value);
extern void Rte_IvsEcuFlatViewPrototype_SensorSWC_DistanceLeading_OutputService(uint32 id, void *
  value);
extern void Rte_IvsActuatorSWC_TargetSpeed_InputService(uint32 id, void * value);
extern void Rte_IvsActuatorSWC_EmergencyBrake_InputService(uint32 id, void * value);
extern uint8 Rte_IpReadWrite_uint8(uint32 id, uint8 value);
extern boolean Rte_IpReadWrite_boolean(uint32 id, boolean value);
extern float32 Rte_IpReadWrite_float32(uint32 id, float32 value);
#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */ 


#endif/*RTEIV_H */
/*----------------------------------------------------------------------------*\
 END OF FILE
\*----------------------------------------------------------------------------*/
