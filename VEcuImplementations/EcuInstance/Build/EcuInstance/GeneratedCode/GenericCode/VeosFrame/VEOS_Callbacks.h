/******************************************************************************************************************************************************************************************************\
 *** VEOS_Callbacks.h
 *** 
 *** This file contains all the global variable declarations for the host functions.
 *** 
 *** File generated on 2022-02-16
 *** 
 *** Generated by VEOS Frame API generator
 *** 
 *** VEOS Frame build revision          : 5.4.0.1269
 *** VEOS Frame interaction ABI version : 5.4.0.0
 *** GeneratorVersion                   : 5.4.0.0
 *** GeneratorTimeStamp                 : 2022-02-16 10:07:28 (UTC)
 *** Used APIs and ABI versions         :
 ***     BusApi                         : 5.0.0.0
 ***     ExperimentationApi             : 5.3.0.0
 ***     SimulationApi                  : 5.4.0.0
 ***     NotificationApi                : 5.0.0.0
 ***     MessageApi                     : 5.0.0.0
 ***     PortApi                        : 5.1.0.1
 ***     OsTaskHandlingApi              : 5.0.0.0
 *** 
 *** Copyright (c) 2022 by dSPACE GmbH, Paderborn, Germany.
 *** All Rights Reserved.
\******************************************************************************************************************************************************************************************************/

#ifndef VEOS_CALLBACKS_H
#define VEOS_CALLBACKS_H

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  INCLUDES
\*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include "VEOS_InteractionFunctions.h"

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  VARIABLE DECLARATIONS
\*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifdef VEOS_GUARD_INTERNAL_API_OK
/******************************************************************************************************************************************************************************************************\
 *** Global Host Function variables.
\******************************************************************************************************************************************************************************************************/
/*--------*
 * BusApi *
 *--------*/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Requests a bus connector handle from the bus services. Parameters: pChannel, Protocol, ChannelId */
extern VEOS_EXPORTS VEOS_BusApi_ChGetHandleType gp_VEOS_BusApi_ChGetHandle;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns a specific bus connector on. Parameters: Channel */
extern VEOS_EXPORTS VEOS_BusApi_ChActivateType gp_VEOS_BusApi_ChActivate;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns a specific bus connector off. Parameters: Channel */
extern VEOS_EXPORTS VEOS_BusApi_ChDeactivateType gp_VEOS_BusApi_ChDeactivate;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Get the current status of a specific bus connector. Parameters: Channel, pStatus */
extern VEOS_EXPORTS VEOS_BusApi_ChGetStatusType gp_VEOS_BusApi_ChGetStatus;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the baud rate of a specific bus connector. Parameters: Channel, BaudRate */
extern VEOS_EXPORTS VEOS_BusApi_ChSetBaudrateType gp_VEOS_BusApi_ChSetBaudrate;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the baud rate for the specified channel. Parameters: Channel, pBaudRate */
extern VEOS_EXPORTS VEOS_BusApi_ChGetBaudrateType gp_VEOS_BusApi_ChGetBaudrate;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Registers an event callback for a bus connector. This will be registered to the ChannelEvent for the specified status type. Parameters: Channel, Status, CbkArg */
extern VEOS_EXPORTS VEOS_BusApi_ChRegisterStatusEventType gp_VEOS_BusApi_ChRegisterStatusEvent;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Applies changes made to the connector. Parameters: Channel */
extern VEOS_EXPORTS VEOS_BusApi_ChApplyChangesType gp_VEOS_BusApi_ChApplyChanges;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the specified channel to sleep. Parameters: Channel */
extern VEOS_EXPORTS VEOS_BusApi_ChSleepType gp_VEOS_BusApi_ChSleep;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns the specified bus message on. Parameters: Message */
extern VEOS_EXPORTS VEOS_BusApi_MsgActivateType gp_VEOS_BusApi_MsgActivate;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns the specified bus message off. Parameters: Message */
extern VEOS_EXPORTS VEOS_BusApi_MsgDeactivateType gp_VEOS_BusApi_MsgDeactivate;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the status of message. Parameters: Msg, pStatus */
extern VEOS_EXPORTS VEOS_BusApi_MsgGetStatusType gp_VEOS_BusApi_MsgGetStatus;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the size of a queue. Parameters: Msg, Size */
extern VEOS_EXPORTS VEOS_BusApi_MsgSetQueueSizeType gp_VEOS_BusApi_MsgSetQueueSize;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Registers a message received event handler function. Parameters: Msg, CbkArg */
extern VEOS_EXPORTS VEOS_BusApi_MsgRegisterReceiveEventType gp_VEOS_BusApi_MsgRegisterReceiveEvent;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Transmits the data of a message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc */
extern VEOS_EXPORTS VEOS_BusApi_MsgTransmitDataType gp_VEOS_BusApi_MsgTransmitData;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Receives the data of a message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimestamp, pDirection, pMsgStatus */
extern VEOS_EXPORTS VEOS_BusApi_MsgReadRxDataType gp_VEOS_BusApi_MsgReadRxData;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Applies the changes made to the message. Parameters: Msg */
extern VEOS_EXPORTS VEOS_BusApi_MsgApplyChangesType gp_VEOS_BusApi_MsgApplyChanges;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Clears the message queue. Parameters: Msg */
extern VEOS_EXPORTS VEOS_BusApi_MsgClearQueueType gp_VEOS_BusApi_MsgClearQueue;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the handle of the specified message mailbox handle. Parameters: pMsg, Channel */
extern VEOS_EXPORTS VEOS_BusApi_MsgGetMailboxHandleType gp_VEOS_BusApi_MsgGetMailboxHandle;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the handle of the specified message. Parameters: pMsg, Channel */
extern VEOS_EXPORTS VEOS_BusApi_MsgGetMonitorHandleType gp_VEOS_BusApi_MsgGetMonitorHandle;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the queue length of the specified message. Parameters: Msg, pQueueLength */
extern VEOS_EXPORTS VEOS_BusApi_MsgGetQueueLengthType gp_VEOS_BusApi_MsgGetQueueLength;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the filters for the specified message. Parameters: Msg, FilterMask, FilterCode */
extern VEOS_EXPORTS VEOS_BusApi_MsgSetFilterType gp_VEOS_BusApi_MsgSetFilter;
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Transmits the data of a CAN message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc, TimeStamp, Format, Rtr, Brs */
extern VEOS_EXPORTS VEOS_BusApi_CanMsgTransmitDataType gp_VEOS_BusApi_CanMsgTransmitData;
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Receives the data of a CAN message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimeStamp, pProcCount, pFormat, pEnabled, pRtr, pBrs, pDirection, pStatus */
extern VEOS_EXPORTS VEOS_BusApi_CanMsgReadRxDataType gp_VEOS_BusApi_CanMsgReadRxData;
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Enables or disables the flexible data rate mode for the specific CAN message. Parameters: Msg, EnableFilter, Brs */
extern VEOS_EXPORTS VEOS_BusApi_CanMsgSetBaudRateFilterType gp_VEOS_BusApi_CanMsgSetBaudRateFilter;
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Gets the data phase baud rate for the flexible data rate mode for the specific CAN message. Parameters: Channel, pBaudRate */
extern VEOS_EXPORTS VEOS_BusApi_CanChGetDataPhaseBaudRateType gp_VEOS_BusApi_CanChGetDataPhaseBaudRate;
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Sets the data phase baud rate for the flexible data rate mode for the specific CAN message. Parameters: Channel, BaudRate */
extern VEOS_EXPORTS VEOS_BusApi_CanChSetDataPhaseBaudRateType gp_VEOS_BusApi_CanChSetDataPhaseBaudRate;
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Transmit a LIN message header. Parameters: Msg, MsgId */
extern VEOS_EXPORTS VEOS_BusApi_LinMsgTransmitHeaderType gp_VEOS_BusApi_LinMsgTransmitHeader;
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Sets the maximum data length code. Parameters: Msg, Dlc */
extern VEOS_EXPORTS VEOS_BusApi_LinMsgSetMaxDlcType gp_VEOS_BusApi_LinMsgSetMaxDlc;
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Registers the message reception event. Parameters: Msg, CbkArg */
extern VEOS_EXPORTS VEOS_BusApi_LinRegisterHeaderReceiveEventType gp_VEOS_BusApi_LinRegisterHeaderReceiveEvent;
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Transmits the data of a LIN message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc, Checksum, Mode */
extern VEOS_EXPORTS VEOS_BusApi_LinMsgTransmitDataType gp_VEOS_BusApi_LinMsgTransmitData;
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Receives the data of a LIN message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimeStamp, pChecksum, pDirection, pStatus */
extern VEOS_EXPORTS VEOS_BusApi_LinMsgReadRxDataType gp_VEOS_BusApi_LinMsgReadRxData;
#endif


/*--------------------*
 * ExperimentationApi *
 *--------------------*/
#if defined(VEOS_GUARD_EXPAPIXCPSERVICEUSERS_OK)
/* XCP foreground service. Parameters: Instance, XcpServiceNumber */
extern VEOS_EXPORTS VEOS_ExpApi_XcpServiceType gp_VEOS_ExpApi_XcpService;
#endif


/*---------------*
 * SimulationApi *
 *---------------*/
/* This function pauses the simulation after triggering of VPU is finished, i.e., same as calling the pause method from an external application. Parameters: Instance */
extern VEOS_EXPORTS VEOS_PauseSimulationType gp_VEOS_PauseSimulation;

#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* This function provides an internal API to stop the simulation or perform a clean, controlled shutdown of the local application process or the entire simulated application. Parameters: Instance,
 * TerminationKind */
extern VEOS_EXPORTS VEOS_SimApi_TerminateSimulationType gp_VEOS_SimApi_TerminateSimulation;
#endif

#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* This function performs an immediate termination and considers the termination as erroneous. Parameters: Instance */
extern VEOS_EXPORTS VEOS_SimApi_TerminateSimulationFatalType gp_VEOS_SimApi_TerminateSimulationFatal;
#endif


/*-----------------*
 * NotificationApi *
 *-----------------*/
#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* Creates an asynchronous notification using the specified function to call. Parameters: Instance, pNotificationFct, pNotificationName, pNotificationId */
extern VEOS_EXPORTS VEOS_NotiApi_CreateNotificationType gp_VEOS_NotiApi_CreateNotification;
#endif

#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* Starts the previously registered notification with the specified id. Parameters: Instance, NotificationId, NotificationOffset, NotificationPeriod */
extern VEOS_EXPORTS VEOS_NotiApi_StartNotificationType gp_VEOS_NotiApi_StartNotification;
#endif

#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* Cancels the previously registered and started notification with the specified id. Parameters: Instance, NotificationId */
extern VEOS_EXPORTS VEOS_NotiApi_CancelNotificationType gp_VEOS_NotiApi_CancelNotification;
#endif


/*------------*
 * MessageApi *
 *------------*/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Transfers the specified message to the simulator backplane where it processed further on. Parameters: Instance, Severity, Display, pMessage */
extern VEOS_EXPORTS VEOS_MsgApi_ShowMessageType gp_VEOS_MsgApi_ShowMessage;
#endif

#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Transfers the specified message to the simulator backplane where it processed further on. Parameters: Instance, Severity, Display, pFormat, pArgs */
extern VEOS_EXPORTS VEOS_MsgApi_ShowMessageVarArgsType gp_VEOS_MsgApi_ShowMessageVarArgs;
#endif
#endif

#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Transfers the specified message to the simulator backplane where it is written to the simulation log. Parameters: Instance, pModuleStr, pFunctionNameStr, pFormat, pArgs */
extern VEOS_EXPORTS VEOS_MsgApi_LogMessageVarArgsType gp_VEOS_MsgApi_LogMessageVarArgs;
#endif
#endif


/*---------*
 * PortApi *
 *---------*/
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortUInt8Type gp_VEOS_PortApi_ReadScalarPortUInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortSInt8Type gp_VEOS_PortApi_ReadScalarPortSInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortUInt16Type gp_VEOS_PortApi_ReadScalarPortUInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortSInt16Type gp_VEOS_PortApi_ReadScalarPortSInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortUInt32Type gp_VEOS_PortApi_ReadScalarPortUInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortSInt32Type gp_VEOS_PortApi_ReadScalarPortSInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortUInt64Type gp_VEOS_PortApi_ReadScalarPortUInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortSInt64Type gp_VEOS_PortApi_ReadScalarPortSInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortBooleanType gp_VEOS_PortApi_ReadScalarPortBoolean;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortFloat32Type gp_VEOS_PortApi_ReadScalarPortFloat32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadScalarPortFloat64Type gp_VEOS_PortApi_ReadScalarPortFloat64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortUInt8Type gp_VEOS_PortApi_ReadVectorPortUInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortSInt8Type gp_VEOS_PortApi_ReadVectorPortSInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortUInt16Type gp_VEOS_PortApi_ReadVectorPortUInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortSInt16Type gp_VEOS_PortApi_ReadVectorPortSInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortUInt32Type gp_VEOS_PortApi_ReadVectorPortUInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortSInt32Type gp_VEOS_PortApi_ReadVectorPortSInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortUInt64Type gp_VEOS_PortApi_ReadVectorPortUInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortSInt64Type gp_VEOS_PortApi_ReadVectorPortSInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortBooleanType gp_VEOS_PortApi_ReadVectorPortBoolean;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortFloat32Type gp_VEOS_PortApi_ReadVectorPortFloat32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_ReadVectorPortFloat64Type gp_VEOS_PortApi_ReadVectorPortFloat64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortUInt8Type gp_VEOS_PortApi_ReadVarSizePortUInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortSInt8Type gp_VEOS_PortApi_ReadVarSizePortSInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortUInt16Type gp_VEOS_PortApi_ReadVarSizePortUInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortSInt16Type gp_VEOS_PortApi_ReadVarSizePortSInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortUInt32Type gp_VEOS_PortApi_ReadVarSizePortUInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortSInt32Type gp_VEOS_PortApi_ReadVarSizePortSInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortUInt64Type gp_VEOS_PortApi_ReadVarSizePortUInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortSInt64Type gp_VEOS_PortApi_ReadVarSizePortSInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortBooleanType gp_VEOS_PortApi_ReadVarSizePortBoolean;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortFloat32Type gp_VEOS_PortApi_ReadVarSizePortFloat32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortFloat64Type gp_VEOS_PortApi_ReadVarSizePortFloat64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_ReadVarSizePortBinaryType gp_VEOS_PortApi_ReadVarSizePortBinary;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to read port element values. Parameters: AccessIndex, pValue, pNumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_GetInPortBufferType gp_VEOS_PortApi_GetInPortBuffer;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortUInt8Type gp_VEOS_PortApi_WriteScalarPortUInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortSInt8Type gp_VEOS_PortApi_WriteScalarPortSInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortUInt16Type gp_VEOS_PortApi_WriteScalarPortUInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortSInt16Type gp_VEOS_PortApi_WriteScalarPortSInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortUInt32Type gp_VEOS_PortApi_WriteScalarPortUInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortSInt32Type gp_VEOS_PortApi_WriteScalarPortSInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortUInt64Type gp_VEOS_PortApi_WriteScalarPortUInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortSInt64Type gp_VEOS_PortApi_WriteScalarPortSInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortBooleanType gp_VEOS_PortApi_WriteScalarPortBoolean;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortFloat32Type gp_VEOS_PortApi_WriteScalarPortFloat32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteScalarPortFloat64Type gp_VEOS_PortApi_WriteScalarPortFloat64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortUInt8Type gp_VEOS_PortApi_WriteVectorPortUInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortSInt8Type gp_VEOS_PortApi_WriteVectorPortSInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortUInt16Type gp_VEOS_PortApi_WriteVectorPortUInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortSInt16Type gp_VEOS_PortApi_WriteVectorPortSInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortUInt32Type gp_VEOS_PortApi_WriteVectorPortUInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortSInt32Type gp_VEOS_PortApi_WriteVectorPortSInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortUInt64Type gp_VEOS_PortApi_WriteVectorPortUInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortSInt64Type gp_VEOS_PortApi_WriteVectorPortSInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortBooleanType gp_VEOS_PortApi_WriteVectorPortBoolean;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortFloat32Type gp_VEOS_PortApi_WriteVectorPortFloat32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue */
extern VEOS_EXPORTS VEOS_PortApi_WriteVectorPortFloat64Type gp_VEOS_PortApi_WriteVectorPortFloat64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortUInt8Type gp_VEOS_PortApi_WriteVarSizePortUInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortSInt8Type gp_VEOS_PortApi_WriteVarSizePortSInt8;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortUInt16Type gp_VEOS_PortApi_WriteVarSizePortUInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortSInt16Type gp_VEOS_PortApi_WriteVarSizePortSInt16;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortUInt32Type gp_VEOS_PortApi_WriteVarSizePortUInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortSInt32Type gp_VEOS_PortApi_WriteVarSizePortSInt32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortUInt64Type gp_VEOS_PortApi_WriteVarSizePortUInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortSInt64Type gp_VEOS_PortApi_WriteVarSizePortSInt64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortBooleanType gp_VEOS_PortApi_WriteVarSizePortBoolean;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortFloat32Type gp_VEOS_PortApi_WriteVarSizePortFloat32;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortFloat64Type gp_VEOS_PortApi_WriteVarSizePortFloat64;
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The function pointer used to write port element values. Parameters: AccessIndex, pValue, NumberOfElements */
extern VEOS_EXPORTS VEOS_PortApi_WriteVarSizePortBinaryType gp_VEOS_PortApi_WriteVarSizePortBinary;
#endif


/*-------------------*
 * OsTaskHandlingApi *
 *-------------------*/
#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function creates a thread including the stacks of a new OS task. Parameters: Instance, pTaskName, StackSize, pTaskFct, TaskId */
extern VEOS_EXPORTS VEOS_OsTskApi_CreateThreadType gp_VEOS_OsTskApi_CreateThread;
#endif

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function deletes the thread specified by the task ID. Parameters: Instance, TaskId */
extern VEOS_EXPORTS VEOS_OsTskApi_DeleteThreadType gp_VEOS_OsTskApi_DeleteThread;
#endif

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function switches to the thread specified by the task ID. Parameters: Instance, TaskId */
extern VEOS_EXPORTS VEOS_OsTskApi_SwitchToThreadType gp_VEOS_OsTskApi_SwitchToThread;
#endif

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function returns the ID of the current thread. Parameters: Instance, TaskId */
extern VEOS_EXPORTS VEOS_OsTskApi_GetCurrentThreadIdType gp_VEOS_OsTskApi_GetCurrentThreadId;
#endif


#endif /* VEOS_GUARD_INTERNAL_API_OK */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* VEOS_CALLBACKS_H */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  END OF FILE
\*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
