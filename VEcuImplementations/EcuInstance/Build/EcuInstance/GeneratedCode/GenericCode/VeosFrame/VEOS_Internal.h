/****************************************************************************************************************************************************\
 *** VEOS_Internal.h
 *** 
 *** This file only provides the API for VEOS internal purposes.
 *** 
 *** File generated on 2022-02-16
 *** 
 *** Generated by VEOS Frame API generator
 *** 
 *** VEOS Frame build revision          : 5.4.0.1269
 *** VEOS Frame interaction ABI version : 5.4.0.0
 *** GeneratorVersion                   : 5.4.0.0
 *** GeneratorTimeStamp                 : 2022-02-16 10:07:28 (UTC)
 *** Used APIs and ABI versions         :
 ***     BusApi                         : 5.0.0.0
 ***     ExperimentationApi             : 5.3.0.0
 ***     SimulationApi                  : 5.4.0.0
 ***     NotificationApi                : 5.0.0.0
 ***     MessageApi                     : 5.0.0.0
 ***     PortApi                        : 5.1.0.1
 ***     OsTaskHandlingApi              : 5.0.0.0
 *** 
 *** Copyright (c) 2022 by dSPACE GmbH, Paderborn, Germany.
 *** All Rights Reserved.
\****************************************************************************************************************************************************/

#ifndef VEOS_INTERNAL_H
#define VEOS_INTERNAL_H

/*--------------------------------------------------------------------------------------------------------------------------------------------------*\
  DEFINES (OPT)
\*--------------------------------------------------------------------------------------------------------------------------------------------------*/

/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame BusApi
\****************************************************************************************************************************************************/

#ifndef VEOS_BUSAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_BUSAPI_UNSETFUNCTIONPOINTER 0
#endif
/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame ExperimentationApi
\****************************************************************************************************************************************************/

#ifndef VEOS_EXPAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_EXPAPI_UNSETFUNCTIONPOINTER 0
#endif
/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame SimulationApi
\****************************************************************************************************************************************************/

#ifndef VEOS_SIMAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_SIMAPI_UNSETFUNCTIONPOINTER 0
#endif
/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame NotificationApi
\****************************************************************************************************************************************************/

#ifndef VEOS_NOTIAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_NOTIAPI_UNSETFUNCTIONPOINTER 0
#endif
/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame MessageApi
\****************************************************************************************************************************************************/

#ifndef VEOS_MSGAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_MSGAPI_UNSETFUNCTIONPOINTER 0
#endif
/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame PortApi
\****************************************************************************************************************************************************/

#ifndef VEOS_PORTAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_PORTAPI_UNSETFUNCTIONPOINTER 0
#endif
/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame OsTaskHandlingApi
\****************************************************************************************************************************************************/

#ifndef VEOS_OSTSKAPI_UNSETFUNCTIONPOINTER
/* The value if no pointer is set. */
#define VEOS_OSTSKAPI_UNSETFUNCTIONPOINTER 0
#endif

/*--------------------------------------------------------------------------------------------------------------------------------------------------*\
  INCLUDES
\*--------------------------------------------------------------------------------------------------------------------------------------------------*/

#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#include "stdarg.h"
#endif


/*--------------------------------------------------------------------------------------------------------------------------------------------------*\
  DEFINES
\*--------------------------------------------------------------------------------------------------------------------------------------------------*/

/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame BusApi
\****************************************************************************************************************************************************/

#ifndef VEOS_BUSAPI_SIMULATION
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether the bus simulation is enabled or not. */
#define VEOS_BUSAPI_SIMULATION VEOS_BUSAPI_SIMULATION_CFG_VALUE
#endif
#endif

#ifndef VEOS_BUSAPI_CANSUPPORT
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether the CAN bus simulation is enabled or not. */
#define VEOS_BUSAPI_CANSUPPORT VEOS_BUSAPI_CANSUPPORT_CFG_VALUE
#endif
#endif

#ifndef VEOS_BUSAPI_LINSUPPORT
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether the LIN bus simulation is enabled or not. */
#define VEOS_BUSAPI_LINSUPPORT VEOS_BUSAPI_LINSUPPORT_CFG_VALUE
#endif
#endif

#ifndef VEOS_BUSAPI_IDIFSUPPORT
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether the idealized bus interface simulation is enabled or not. */
#define VEOS_BUSAPI_IDIFSUPPORT VEOS_BUSAPI_IDIFSUPPORT_CFG_VALUE
#endif
#endif

#ifndef VEOS_BUSAPI_INTERRUPT
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether interrupts are enabled or not. */
#define VEOS_BUSAPI_INTERRUPT VEOS_BUSAPI_INTERRUPT_CFG_VALUE
#endif
#endif

/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame ExperimentationApi
\****************************************************************************************************************************************************/

#ifndef VEOS_EXPAPI_NUMBEROFSERVICERASTERS
#if defined(VEOS_GUARD_EXPAPIUSERS_OK)
/* The number of DAQ service rasters. */
#define VEOS_EXPAPI_NUMBEROFSERVICERASTERS VEOS_EXPAPI_NUMBEROFSERVICERASTERS_CFG_VALUE
#endif
#endif

#ifndef VEOS_EXPAPI_SERVICERASTERVALUES
#if defined(VEOS_GUARD_EXPAPIUSERS_OK)
/* The number of available DAQ service rasters. */
#define VEOS_EXPAPI_SERVICERASTERVALUES VEOS_EXPAPI_SERVICERASTERVALUES_CFG_VALUE
#endif
#endif

/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame NotificationApi
\****************************************************************************************************************************************************/

#ifndef VEOS_NOTIAPI_NOTIFICATION
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether notifications are enabled or not. */
#define VEOS_NOTIAPI_NOTIFICATION VEOS_NOTIAPI_NOTIFICATION_CFG_VALUE
#endif
#endif

/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame PortApi
\****************************************************************************************************************************************************/

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANSCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar boolean signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANSCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANSCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANVECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial boolean signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANVECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANVECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANVARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial boolean signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANVARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGBOOLEANVARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT8SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar uint8 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT8SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT8SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT8VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint8 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT8VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT8VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT8VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint8 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT8VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT8VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT16SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar uint16 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT16SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT16SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT16VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint16 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT16VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT16VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT16VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint16 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT16VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT16VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT32SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar uint32 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT32SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT32SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT32VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint32 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT32VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT32VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT32VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint32 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT32VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT32VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT64SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar uint64 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT64SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT64SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT64VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint64 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT64VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT64VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGUINT64VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial uint64 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGUINT64VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGUINT64VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT8SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar sint8 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT8SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT8SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT8VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint8 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT8VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT8VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT8VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint8 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT8VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT8VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT16SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar sint16 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT16SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT16SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT16VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint16 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT16VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT16VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT16VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint16 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT16VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT16VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT32SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar sint32 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT32SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT32SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT32VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint32 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT32VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT32VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT32VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint32 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT32VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT32VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT64SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar sint64 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT64SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT64SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT64VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint64 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT64VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT64VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGSINT64VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial sint64 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGSINT64VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGSINT64VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar float32 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial float32 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial float32 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT32VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming scalar float64 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64SCALARSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial float64 signals. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64VECTORSIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming vectorial float64 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGFLOAT64VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFINCOMINGBINARYVARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of incoming binary signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFINCOMINGBINARYVARSIZESIGNALS VEOS_PORTAPI_NUMBEROFINCOMINGBINARYVARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANSCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar boolean signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANSCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANSCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANVECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial boolean signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANVECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANVECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANVARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial boolean signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANVARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGBOOLEANVARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar uint8 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint8 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint8 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT8VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar uint16 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint16 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint16 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT16VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar uint32 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint32 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint32 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT32VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar uint64 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint64 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial uint64 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGUINT64VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar sint8 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint8 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint8 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT8VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar sint16 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint16 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint16 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT16VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar sint32 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint32 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint32 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT32VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar sint64 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint64 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial sint64 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGSINT64VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar float32 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial float32 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial float32 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT32VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64SCALARSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing scalar float64 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64SCALARSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64SCALARSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64VECTORSIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial float64 signals. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64VECTORSIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64VECTORSIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64VARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing vectorial float64 signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64VARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGFLOAT64VARSIZESIGNALS_CFG_VALUE
#endif
#endif

#ifndef VEOS_PORTAPI_NUMBEROFOUTGOINGBINARYVARSIZESIGNALS
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* The number of outgoing binary signals of variable size. */
#define VEOS_PORTAPI_NUMBEROFOUTGOINGBINARYVARSIZESIGNALS VEOS_PORTAPI_NUMBEROFOUTGOINGBINARYVARSIZESIGNALS_CFG_VALUE
#endif
#endif

/****************************************************************************************************************************************************\
 *** Constant pre-processor defines for VEOS frame OsTaskHandlingApi
\****************************************************************************************************************************************************/

#ifndef VEOS_OSTSKAPI_TASKHANDLING
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Configuration value indicating, whether task handling is enabled or not. */
#define VEOS_OSTSKAPI_TASKHANDLING VEOS_OSTSKAPI_TASKHANDLING_CFG_VALUE
#endif
#endif


/*--------------------------------------------------------------------------------------------------------------------------------------------------*\
  FUNCTION PROTOTYPES
\*--------------------------------------------------------------------------------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/****************************************************************************************************************************************************\
 *** Host function wrappers for VEOS frame BusApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChGetHandle
 *** 
 *** DESCRIPTION:
 ***     Requests a bus connector handle from the bus services.
 *** 
 *** PARAMETERS:
 ***     Type                               Name       Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     VEOS_BusApi_ConnectorHandleType *  pChannel   Outgoing argument: The requested handle of the channel
 ***     const VEOS_BusApi_InterfaceType    Protocol   Incoming argument: The type of the simulated hardware interface.
 ***     const VEOS_uint32                  ChannelId  Incoming argument: The id of the channel.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChGetHandle(
    VEOS_BusApi_ConnectorHandleType * pChannel,
    const VEOS_BusApi_InterfaceType Protocol,
    const VEOS_uint32 ChannelId
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChActivate
 *** 
 *** DESCRIPTION:
 ***     Turns a specific bus connector on.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the bus connector
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChActivate(const VEOS_BusApi_ConnectorHandleType Channel);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChDeactivate
 *** 
 *** DESCRIPTION:
 ***     Turns a specific bus connector off.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the bus connector
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChDeactivate(const VEOS_BusApi_ConnectorHandleType Channel);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChGetStatus
 *** 
 *** DESCRIPTION:
 ***     Get the current status of a specific bus connector.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the bus connector
 ***     VEOS_BusApi_ConnectorStatusType *      pStatus  Outgoing argument: The status requested
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChGetStatus(
    const VEOS_BusApi_ConnectorHandleType Channel,
    VEOS_BusApi_ConnectorStatusType * pStatus
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChSetBaudrate
 *** 
 *** DESCRIPTION:
 ***     Sets the baud rate of a specific bus connector.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel   Incoming argument: The handle of the bus connector.
 ***     const VEOS_uint32                      BaudRate  Incoming argument: The baud rate to set.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChSetBaudrate(
    const VEOS_BusApi_ConnectorHandleType Channel,
    const VEOS_uint32 BaudRate
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChGetBaudrate
 *** 
 *** DESCRIPTION:
 ***     Gets the baud rate for the specified channel.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name       Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel    Incoming argument: The handle of the bus connector.
 ***     VEOS_uint32 *                          pBaudRate  Outgoing argument: The baud rate requested.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChGetBaudrate(
    const VEOS_BusApi_ConnectorHandleType Channel,
    VEOS_uint32 * pBaudRate
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChRegisterStatusEvent
 *** 
 *** DESCRIPTION:
 ***     Registers an event callback for a bus connector. This will be registered to the ChannelEvent for the specified status type.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the bus connector.
 ***     const VEOS_BusApi_ConnectorStatusType  Status   Incoming argument: The status to react to.
 ***     const VEOS_uint32                      CbkArg   Incoming argument: The callback function argument to use.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChRegisterStatusEvent(
    const VEOS_BusApi_ConnectorHandleType Channel,
    const VEOS_BusApi_ConnectorStatusType Status,
    const VEOS_uint32 CbkArg
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChApplyChanges
 *** 
 *** DESCRIPTION:
 ***     Applies changes made to the connector.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the bus connector.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChApplyChanges(const VEOS_BusApi_ConnectorHandleType Channel);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_ChSleep
 *** 
 *** DESCRIPTION:
 ***     Sets the specified channel to sleep.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the bus connector.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_ChSleep(const VEOS_BusApi_ConnectorHandleType Channel);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgActivate
 *** 
 *** DESCRIPTION:
 ***     Turns the specified bus message on.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Message  Incoming argument: The handle of the message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgActivate(const VEOS_BusApi_MessageHandleType Message);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgDeactivate
 *** 
 *** DESCRIPTION:
 ***     Turns the specified bus message off.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Message  Incoming argument: The handle of the message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgDeactivate(const VEOS_BusApi_MessageHandleType Message);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgGetStatus
 *** 
 *** DESCRIPTION:
 ***     Gets the status of message.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg      Incoming argument: The handle of the message.
 ***     VEOS_BusApi_MessageStatusType *      pStatus  Outgoing argument: The status of the message message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgGetStatus(
    const VEOS_BusApi_MessageHandleType Msg,
    VEOS_BusApi_MessageStatusType * pStatus
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgSetQueueSize
 *** 
 *** DESCRIPTION:
 ***     Sets the size of a queue.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name  Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg   Incoming argument: The handle of the message.
 ***     const VEOS_uint32                    Size  Incoming argument: The new size of the queue.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgSetQueueSize(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 Size
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgRegisterReceiveEvent
 *** 
 *** DESCRIPTION:
 ***     Registers a message received event handler function.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name    Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg     Incoming argument: The handle of the message.
 ***     const VEOS_uint32                    CbkArg  Incoming argument: The argument to pass to the callback function.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgRegisterReceiveEvent(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 CbkArg
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgTransmitData
 *** 
 *** DESCRIPTION:
 ***     Transmits the data of a message to the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name   Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg    Incoming argument: The handle of the message.
 ***     const VEOS_uint32                    MsgId  Incoming argument: The Id of the message.
 ***     const VEOS_uint8 *                   pData  Incoming argument: The payload to transmit.
 ***     const VEOS_uint32                    Dlc    Incoming argument: The length of the payload to transmit.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgTransmitData(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 MsgId,
    const VEOS_uint8 * pData,
    const VEOS_uint32 Dlc
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgReadRxData
 *** 
 *** DESCRIPTION:
 ***     Receives the data of a message from the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name        Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg         Incoming argument: The handle of the message.
 ***     VEOS_uint32 *                        pMsgId      Outgoing argument: The Id of the message.
 ***     VEOS_uint8 *                         pData       Outgoing argument: The payload received.
 ***     VEOS_uint32 *                        pDlc        Outgoing argument: The length of the payload received.
 ***     VEOS_float64 *                       pTimestamp  Outgoing argument: The time stamp the message was received
 ***     VEOS_BusApi_MsgDirectionType *       pDirection  Outgoing argument: The direction of the message
 ***     VEOS_BusApi_MessageStatusType *      pMsgStatus  Outgoing argument: The message status
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgReadRxData(
    const VEOS_BusApi_MessageHandleType Msg,
    VEOS_uint32 * pMsgId,
    VEOS_uint8 * pData,
    VEOS_uint32 * pDlc,
    VEOS_float64 * pTimestamp,
    VEOS_BusApi_MsgDirectionType * pDirection,
    VEOS_BusApi_MessageStatusType * pMsgStatus
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgApplyChanges
 *** 
 *** DESCRIPTION:
 ***     Applies the changes made to the message.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name  Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg   Incoming argument: The handle of the message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgApplyChanges(const VEOS_BusApi_MessageHandleType Msg);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgClearQueue
 *** 
 *** DESCRIPTION:
 ***     Clears the message queue.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name  Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg   Incoming argument: The handle of the message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgClearQueue(const VEOS_BusApi_MessageHandleType Msg);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgGetMailboxHandle
 *** 
 *** DESCRIPTION:
 ***     Gets the handle of the specified message mailbox handle.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     VEOS_BusApi_MessageHandleType *        pMsg     Outgoing argument: The handle requested.
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the channel.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgGetMailboxHandle(
    VEOS_BusApi_MessageHandleType * pMsg,
    const VEOS_BusApi_ConnectorHandleType Channel
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgGetMonitorHandle
 *** 
 *** DESCRIPTION:
 ***     Gets the handle of the specified message.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name     Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     VEOS_BusApi_MessageHandleType *        pMsg     Outgoing argument: The handle requested.
 ***     const VEOS_BusApi_ConnectorHandleType  Channel  Incoming argument: The handle of the channel.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgGetMonitorHandle(
    VEOS_BusApi_MessageHandleType * pMsg,
    const VEOS_BusApi_ConnectorHandleType Channel
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgGetQueueLength
 *** 
 *** DESCRIPTION:
 ***     Gets the queue length of the specified message.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name          Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg           Incoming argument: The message handle.
 ***     VEOS_uint32 *                        pQueueLength  Outgoing argument: The length of the queue for this message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgGetQueueLength(
    const VEOS_BusApi_MessageHandleType Msg,
    VEOS_uint32 * pQueueLength
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_MsgSetFilter
 *** 
 *** DESCRIPTION:
 ***     Sets the filters for the specified message.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name        Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg         Incoming argument: The message handle.
 ***     const VEOS_uint32                    FilterMask  Incoming argument: The filter mask for the specified message.
 ***     const VEOS_uint32                    FilterCode  Incoming argument: The filter code for the specified message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_SIMULATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_MsgSetFilter(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 FilterMask,
    const VEOS_uint32 FilterCode
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_CanMsgTransmitData
 *** 
 *** DESCRIPTION:
 ***     Transmits the data of a CAN message to the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name       Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg        Incoming argument: The handle to the message.
 ***     const VEOS_uint32                    MsgId      Incoming argument: The ID
 ***     const VEOS_uint8 *                   pData      Incoming argument: The payload to transmit.
 ***     const VEOS_uint32                    Dlc        Incoming argument: The length of the payload to transmit.
 ***     const VEOS_float64                   TimeStamp  Incoming argument: The timestamp of transmission or reception.
 ***     const VEOS_BusApi_CanMsgFormatType   Format     Incoming argument: The format of the CAN message
 ***     const VEOS_boolean                   Rtr        Incoming argument: The Remote transmission request flag.
 ***     const VEOS_boolean                   Brs        Incoming argument: The baud rate switch flag.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
#if VEOS_BUSAPI_CANSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_CanMsgTransmitData(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 MsgId,
    const VEOS_uint8 * pData,
    const VEOS_uint32 Dlc,
    const VEOS_float64 TimeStamp,
    const VEOS_BusApi_CanMsgFormatType Format,
    const VEOS_boolean Rtr,
    const VEOS_boolean Brs
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_CanMsgReadRxData
 *** 
 *** DESCRIPTION:
 ***     Receives the data of a CAN message from the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name        Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg         Incoming argument: The handle to the message.
 ***     VEOS_uint32 *                        pMsgId      Outgoing argument: The ID of the message
 ***     VEOS_uint8 *                         pData       Outgoing argument: The payload received.
 ***     VEOS_uint32 *                        pDlc        Outgoing argument: The length of the payload received.
 ***     VEOS_float64 *                       pTimeStamp  Outgoing argument: The timestamp of transmission or reception.
 ***     VEOS_uint32 *                        pProcCount  Outgoing argument: The processing count of the message.
 ***     VEOS_BusApi_CanMsgFormatType *       pFormat     Outgoing argument: The CAN message format of the mesage.
 ***     VEOS_boolean *                       pEnabled    Outgoing argument: The flag indicating whether this message is enabled or not.
 ***     VEOS_boolean *                       pRtr        Outgoing argument: The remote transmission request flag.
 ***     VEOS_boolean *                       pBrs        Outgoing argument: The Baud rate switch flag.
 ***     VEOS_BusApi_MsgDirectionType *       pDirection  Outgoing argument: The transmission direction of the message.
 ***     VEOS_BusApi_MessageStatusType *      pStatus     Outgoing argument: The status of the underlying message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
#if VEOS_BUSAPI_CANSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_CanMsgReadRxData(
    const VEOS_BusApi_MessageHandleType Msg,
    VEOS_uint32 * pMsgId,
    VEOS_uint8 * pData,
    VEOS_uint32 * pDlc,
    VEOS_float64 * pTimeStamp,
    VEOS_uint32 * pProcCount,
    VEOS_BusApi_CanMsgFormatType * pFormat,
    VEOS_boolean * pEnabled,
    VEOS_boolean * pRtr,
    VEOS_boolean * pBrs,
    VEOS_BusApi_MsgDirectionType * pDirection,
    VEOS_BusApi_MessageStatusType * pStatus
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_CanMsgSetBaudRateFilter
 *** 
 *** DESCRIPTION:
 ***     Enables or disables the flexible data rate mode for the specific CAN message.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name          Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg           Incoming argument: The handle to the message.
 ***     const VEOS_boolean                   EnableFilter  Incoming argument: The flag to enable or disable the message filter.
 ***     const VEOS_boolean                   Brs           Incoming argument: The CAN message baud rate switch flag.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
#if VEOS_BUSAPI_CANSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_CanMsgSetBaudRateFilter(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_boolean EnableFilter,
    const VEOS_boolean Brs
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_CanChGetDataPhaseBaudRate
 *** 
 *** DESCRIPTION:
 ***     Gets the data phase baud rate for the flexible data rate mode for the specific CAN message.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name       Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel    Incoming argument: The handle to the message.
 ***     VEOS_uint32 *                          pBaudRate  Outgoing argument: The CAN message baud rate for the data phase.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
#if VEOS_BUSAPI_CANSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_CanChGetDataPhaseBaudRate(
    const VEOS_BusApi_ConnectorHandleType Channel,
    VEOS_uint32 * pBaudRate
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_CanChSetDataPhaseBaudRate
 *** 
 *** DESCRIPTION:
 ***     Sets the data phase baud rate for the flexible data rate mode for the specific CAN message.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_ConnectorHandleType  Channel   Incoming argument: The handle to the message.
 ***     const VEOS_uint32                      BaudRate  Incoming argument: The CAN message baud rate for the data phase.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
#if VEOS_BUSAPI_CANSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_CanChSetDataPhaseBaudRate(
    const VEOS_BusApi_ConnectorHandleType Channel,
    const VEOS_uint32 BaudRate
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_LinMsgTransmitHeader
 *** 
 *** DESCRIPTION:
 ***     Transmit a LIN message header.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name   Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg    Incoming argument: The handle to the message.
 ***     const VEOS_uint32                    MsgId  Incoming argument: The ID of the message
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
#if VEOS_BUSAPI_LINSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_LinMsgTransmitHeader(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 MsgId
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_LinMsgSetMaxDlc
 *** 
 *** DESCRIPTION:
 ***     Sets the maximum data length code.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name  Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg   Incoming argument: The handle of the message.
 ***     const VEOS_uint32                    Dlc   Incoming argument: The new data length code.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
#if VEOS_BUSAPI_LINSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_LinMsgSetMaxDlc(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 Dlc
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_LinRegisterHeaderReceiveEvent
 *** 
 *** DESCRIPTION:
 ***     Registers the message reception event.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name    Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg     Incoming argument: The handle of the message.
 ***     const VEOS_uint32                    CbkArg  Incoming argument: The argument for the internal callback function.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
#if VEOS_BUSAPI_LINSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_LinRegisterHeaderReceiveEvent(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 CbkArg
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_LinMsgTransmitData
 *** 
 *** DESCRIPTION:
 ***     Transmits the data of a LIN message to the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                                      Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType       Msg       Incoming argument: The handle of the message.
 ***     const VEOS_uint32                         MsgId     Incoming argument: The ID of the message
 ***     const VEOS_uint8 *                        pData     Incoming argument: The payload to transmit.
 ***     const VEOS_uint32                         Dlc       Incoming argument: The length of the payload to transmit.
 ***     const VEOS_uint8                          Checksum  Incoming argument: The checksum of the current LIN frame.
 ***     const VEOS_BusApi_LinMsgChecksumModeType  Mode      Incoming argument: The checksum mode to apply.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
#if VEOS_BUSAPI_LINSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_LinMsgTransmitData(
    const VEOS_BusApi_MessageHandleType Msg,
    const VEOS_uint32 MsgId,
    const VEOS_uint8 * pData,
    const VEOS_uint32 Dlc,
    const VEOS_uint8 Checksum,
    const VEOS_BusApi_LinMsgChecksumModeType Mode
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_LinMsgReadRxData
 *** 
 *** DESCRIPTION:
 ***     Receives the data of a LIN message from the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                                 Name        Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_BusApi_MessageHandleType  Msg         Incoming argument: The handle of the message.
 ***     VEOS_uint32 *                        pMsgId      Outgoing argument: The ID of the message
 ***     VEOS_uint8 *                         pData       Outgoing argument: The payload received.
 ***     VEOS_uint32 *                        pDlc        Outgoing argument: The length of the payload received
 ***     VEOS_float64 *                       pTimeStamp  Outgoing argument: The timestamp of transmission or reception.
 ***     VEOS_uint8 *                         pChecksum   Outgoing argument: The checksum of the current LIN frame.
 ***     VEOS_BusApi_MsgDirectionType *       pDirection  Outgoing argument: The transmission direction of the message.
 ***     VEOS_BusApi_MessageStatusType *      pStatus     Outgoing argument: The status of the underlying message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
#if VEOS_BUSAPI_LINSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_LinMsgReadRxData(
    const VEOS_BusApi_MessageHandleType Msg,
    VEOS_uint32 * pMsgId,
    VEOS_uint8 * pData,
    VEOS_uint32 * pDlc,
    VEOS_float64 * pTimeStamp,
    VEOS_uint8 * pChecksum,
    VEOS_BusApi_MsgDirectionType * pDirection,
    VEOS_BusApi_MessageStatusType * pStatus
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** Host function wrappers for VEOS frame ExperimentationApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_XcpService
 *** 
 *** DESCRIPTION:
 ***     XCP foreground service.
 *** 
 *** PARAMETERS:
 ***     Type               Name              Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint16  XcpServiceNumber  Incoming argument: The XCP service number.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPAPIXCPSERVICEUSERS_OK)
#if VEOS_DAQ_SERVICE_XCP == VEOS_ON
extern VEOS_ApiSuccessType VEOS_ExpApi_XcpService(const VEOS_uint16 XcpServiceNumber);
#endif
#endif

/****************************************************************************************************************************************************\
 *** Host function wrappers for VEOS frame SimulationApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_TerminateSimulation
 *** 
 *** DESCRIPTION:
 ***     This function provides an internal API to stop the simulation or perform a clean, controlled shutdown of the local application process or
 ***     the entire simulated application.
 *** 
 *** PARAMETERS:
 ***     Type                                   Name             Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_SimApi_TerminationKindType  TerminationKind  Incoming argument: Specifies the kind of termination.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_TerminateSimulation(const VEOS_SimApi_TerminationKindType TerminationKind);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_TerminateSimulationFatal
 *** 
 *** DESCRIPTION:
 ***     This function performs an immediate termination and considers the termination as erroneous.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_TerminateSimulationFatal(void);
#endif

/****************************************************************************************************************************************************\
 *** Host function wrappers for VEOS frame NotificationApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_NotiApi_CreateNotification
 *** 
 *** DESCRIPTION:
 ***     Creates an asynchronous notification using the specified function to call.
 *** 
 *** PARAMETERS:
 ***     Type                                             Name               Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_SimApi_InterruptCallbackFunctionType  pNotificationFct   Incoming argument: The pointer to the function to call.
 ***     const VEOS_char *                                pNotificationName  Incoming argument: The name of the notification function to call.
 ***     VEOS_uint32 *                                    pNotificationId    Outgoing argument: The id.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
#if VEOS_NOTIAPI_NOTIFICATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_NotiApi_CreateNotification(
    VEOS_SimApi_InterruptCallbackFunctionType const pNotificationFct,
    const VEOS_char * pNotificationName,
    VEOS_uint32 * pNotificationId
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_NotiApi_StartNotification
 *** 
 *** DESCRIPTION:
 ***     Starts the previously registered notification with the specified id.
 *** 
 *** PARAMETERS:
 ***     Type               Name                Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint32  NotificationId      Incoming argument: The notification Id.
 ***     const VEOS_uint64  NotificationOffset  Incoming argument: The relative notification offset in nanoseconds.
 ***     const VEOS_uint64  NotificationPeriod  Incoming argument: The notification period in nanoseconds.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
#if VEOS_NOTIAPI_NOTIFICATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_NotiApi_StartNotification(
    const VEOS_uint32 NotificationId,
    const VEOS_uint64 NotificationOffset,
    const VEOS_uint64 NotificationPeriod
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_NotiApi_CancelNotification
 *** 
 *** DESCRIPTION:
 ***     Cancels the previously registered and started notification with the specified id.
 *** 
 *** PARAMETERS:
 ***     Type               Name            Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint32  NotificationId  Incoming argument: The notification Id.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
#if VEOS_NOTIAPI_NOTIFICATION == VEOS_ON
extern VEOS_ApiSuccessType VEOS_NotiApi_CancelNotification(const VEOS_uint32 NotificationId);
#endif
#endif

/****************************************************************************************************************************************************\
 *** Host function wrappers for VEOS frame MessageApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_MsgApi_ShowMessage
 *** 
 *** DESCRIPTION:
 ***     Transfers the specified message to the simulator backplane where it processed further on.
 *** 
 *** PARAMETERS:
 ***     Type                            Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_MsgApi_SeverityType  Severity  Incoming argument: The severity of the message to submit.
 ***     const VEOS_boolean              Display   Incoming argument: If true, the message is displayed in the message browser, otherwise it is
 ***                                               written to the dSPACE Log.
 ***     const VEOS_char *               pMessage  Incoming argument: The formatted message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_MsgApi_ShowMessage(
    const VEOS_MsgApi_SeverityType Severity,
    const VEOS_boolean Display,
    const VEOS_char * pMessage
);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_MsgApi_ShowMessageVarArgs
 *** 
 *** DESCRIPTION:
 ***     Transfers the specified message to the simulator backplane where it processed further on.
 *** 
 *** PARAMETERS:
 ***     Type                            Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_MsgApi_SeverityType  Severity  Incoming argument: The severity of the message to submit.
 ***     const VEOS_boolean              Display   Incoming argument: If true, the message is displayed in the message browser, otherwise it is
 ***                                               written to the dSPACE Log.
 ***     const VEOS_char *               pFormat   Incoming argument: The formatted message.
 ***     va_list                         pArgs     Incoming argument: Reference to the formatting arguments.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_MsgApi_ShowMessageVarArgs(
    const VEOS_MsgApi_SeverityType Severity,
    const VEOS_boolean Display,
    const VEOS_char * pFormat,
    va_list pArgs
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_MsgApi_LogMessageVarArgs
 *** 
 *** DESCRIPTION:
 ***     Transfers the specified message to the simulator backplane where it is written to the simulation log.
 *** 
 *** PARAMETERS:
 ***     Type               Name              Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_char *  pModuleStr        Incoming argument: The name of the sending module.
 ***     const VEOS_char *  pFunctionNameStr  Incoming argument: The function within the module reporting the error.
 ***     const VEOS_char *  pFormat           Incoming argument: The formatted message.
 ***     va_list            pArgs             Incoming argument: Reference to the formatting arguments.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#if defined(VEOS_GUARD_INTERNAL_API_OK)
#if defined(VEOS_DEBUG)
extern VEOS_ApiSuccessType VEOS_MsgApi_LogMessageVarArgs(
    const VEOS_char * pModuleStr,
    const VEOS_char * pFunctionNameStr,
    const VEOS_char * pFormat,
    va_list pArgs
);
#endif
#endif
#endif

/****************************************************************************************************************************************************\
 *** Host function wrappers for VEOS frame OsTaskHandlingApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_OsTskApi_CreateThread
 *** 
 *** DESCRIPTION:
 ***     This function creates a thread including the stacks of a new OS task.
 *** 
 *** PARAMETERS:
 ***     Type                                  Name       Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_char *                     pTaskName  Incoming argument: The name of the task that should be created.
 ***     const VEOS_uint32                     StackSize  Incoming argument: The size of the stack.
 ***     const VEOS_OsTskApi_TaskFunctionType  pTaskFct   Incoming argument: The pointer to the function to call.
 ***     VEOS_OsTskApi_TaskIdType *            TaskId     Outgoing argument: The ID of the task that is created.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
#if VEOS_OSTSKAPI_TASKHANDLING == VEOS_ON
extern VEOS_ApiSuccessType VEOS_OsTskApi_CreateThread(
    const VEOS_char * pTaskName,
    const VEOS_uint32 StackSize,
    VEOS_OsTskApi_TaskFunctionType const pTaskFct,
    VEOS_OsTskApi_TaskIdType * TaskId
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_OsTskApi_DeleteThread
 *** 
 *** DESCRIPTION:
 ***     This function deletes the thread specified by the task ID.
 *** 
 *** PARAMETERS:
 ***     Type                            Name    Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_OsTskApi_TaskIdType  TaskId  Incoming argument: The ID of the task that should be deleted.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
#if VEOS_OSTSKAPI_TASKHANDLING == VEOS_ON
extern VEOS_ApiSuccessType VEOS_OsTskApi_DeleteThread(const VEOS_OsTskApi_TaskIdType TaskId);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_OsTskApi_SwitchToThread
 *** 
 *** DESCRIPTION:
 ***     This function switches to the thread specified by the task ID.
 *** 
 *** PARAMETERS:
 ***     Type                            Name    Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_OsTskApi_TaskIdType  TaskId  Incoming argument: The ID of the task that should be switched to.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
#if VEOS_OSTSKAPI_TASKHANDLING == VEOS_ON
extern VEOS_ApiSuccessType VEOS_OsTskApi_SwitchToThread(const VEOS_OsTskApi_TaskIdType TaskId);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_OsTskApi_GetCurrentThreadId
 *** 
 *** DESCRIPTION:
 ***     This function returns the ID of the current thread.
 *** 
 *** PARAMETERS:
 ***     Type                        Name    Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     VEOS_OsTskApi_TaskIdType *  TaskId  Outgoing argument: The ID of the current thread.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
#if VEOS_OSTSKAPI_TASKHANDLING == VEOS_ON
extern VEOS_ApiSuccessType VEOS_OsTskApi_GetCurrentThreadId(VEOS_OsTskApi_TaskIdType * TaskId);
#endif
#endif

/****************************************************************************************************************************************************\
 *** API functions for VEOS frame BusApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_InterruptEvent
 *** 
 *** DESCRIPTION:
 ***     This event occurs, when the simulator sends an asynchronous interrupt event.
 *** 
 *** PARAMETERS:
 ***     Type                                             Name           Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_SimApi_InterruptCallbackFunctionType  pInterruptFct  Incoming argument: The pointer to the interrupt callback function to call.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
#if VEOS_BUSAPI_INTERRUPT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_InterruptEvent(VEOS_SimApi_InterruptCallbackFunctionType const pInterruptFct);
#endif
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_BusApi_LinCalculateChecksum
 *** 
 *** DESCRIPTION:
 ***     Calculates the checksum of a LIN message according to LIN specification.
 *** 
 *** PARAMETERS:
 ***     Type                Name          Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint8    InitialValue  Incoming argument: Initial value for the checksum calculation. When used in classic mode, the value must
 ***                                       be set to 0. In enhanced mode, the value must be set to message pid.
 ***     const VEOS_uint8 *  pData         Incoming argument: The data to calculate the checksum from.
 ***     const VEOS_uint32   Dlc           Incoming argument: The length of the data to calculate the checksum from.
 ***     VEOS_uint8 *        pChecksum     Outgoing argument: The calculated checksum.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
#if VEOS_BUSAPI_LINSUPPORT == VEOS_ON
extern VEOS_ApiSuccessType VEOS_BusApi_LinCalculateChecksum(
    const VEOS_uint8 InitialValue,
    const VEOS_uint8 * pData,
    const VEOS_uint32 Dlc,
    VEOS_uint8 * pChecksum
);
#endif
#endif

/****************************************************************************************************************************************************\
 *** API functions for VEOS frame ExperimentationApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_GetRasterService
 *** 
 *** DESCRIPTION:
 ***     Gets the services enabled for the specified raster.
 *** 
 *** PARAMETERS:
 ***     Type                       Name        Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint16          RasterId    Incoming argument: The ID of the raster.
 ***     VEOS_ExpApi_ServiceType *  pRasterSvc  Outgoing argument: The services enabled for the raster.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_GetRasterService(
    const VEOS_uint16 RasterId,
    VEOS_ExpApi_ServiceType * pRasterSvc
);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_CallDaqService
 *** 
 *** DESCRIPTION:
 ***     Calls the configured data acquisition service triggering the specified raster
 *** 
 *** PARAMETERS:
 ***     Type               Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint16  RasterId  Incoming argument: ID of the measurement or stimulation raster - identical to the XCP event channel id or DsDAQ
 ***                                  service channel
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_CallDaqService(const VEOS_uint16 RasterId);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_CallBypassingService
 *** 
 *** DESCRIPTION:
 ***     Calls the configured bypassing service triggering the specified raster
 *** 
 *** PARAMETERS:
 ***     Type               Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint16  RasterId  Incoming argument: ID of the measurement or stimulation raster - identical to the XCP event channel id or DsDAQ
 ***                                  service channel
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_CallBypassingService(const VEOS_uint16 RasterId);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_CallStimServicePostStep
 *** 
 *** DESCRIPTION:
 ***     Performs the post service actions of the stimulation services.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_CallStimServicePostStep(void);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_CallStimServicePreStep
 *** 
 *** DESCRIPTION:
 ***     Calls the functions for the pre calculation steps of the stimulation services.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_CallStimServicePreStep(void);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_StimSvcSyncMode
 *** 
 *** DESCRIPTION:
 ***     Enforces the synchronous stimulation mode.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCVECUUSER_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_StimSvcSyncMode(void);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_StimSvcAsyncMode
 *** 
 *** DESCRIPTION:
 ***     Enforces the asynchronous stimulation mode.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCVECUUSER_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_StimSvcAsyncMode(void);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_DsModelAccessRead
 *** 
 *** DESCRIPTION:
 ***     Calls the read access function of the co-simulation service.
 *** 
 *** PARAMETERS:
 ***     Type               Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint32  RasterId  Incoming argument: The ID of the raster.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_DsModelAccessRead(const VEOS_uint32 RasterId);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_ExpApi_DsModelAccessWrite
 *** 
 *** DESCRIPTION:
 ***     Calls the write access function of the co-simulation service.
 *** 
 *** PARAMETERS:
 ***     Type               Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint32  RasterId  Incoming argument: The ID of the raster.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
extern VEOS_ApiSuccessType VEOS_ExpApi_DsModelAccessWrite(const VEOS_uint32 RasterId);
#endif

/****************************************************************************************************************************************************\
 *** API functions for VEOS frame SimulationApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_SignalApiError
 *** 
 *** DESCRIPTION:
 ***     Signals an error to the simulator.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_SignalApiError(void);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_ReportError
 *** 
 *** DESCRIPTION:
 ***     This function will report an error to the simulation backplane.
 *** 
 *** PARAMETERS:
 ***     Type                       Name              Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_char *          pModuleStr        Incoming argument: The name of the module reporting the error.
 ***     const VEOS_char *          pFunctionNameStr  Incoming argument: The function within the module reporting the error.
 ***     const VEOS_ApiSuccessType  ErrorCode         Incoming argument: The error code reported.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_ReportError(
    const VEOS_char * pModuleStr,
    const VEOS_char * pFunctionNameStr,
    const VEOS_ApiSuccessType ErrorCode
);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_CallIoHandler
 *** 
 *** DESCRIPTION:
 ***     Tries to call the event handler for registered I/O events.
 *** 
 *** PARAMETERS:
 ***     Type               Name       Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_uint32  IoEventId  Incoming argument: The ID of the event which has occurred.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_CallIoHandler(const VEOS_uint32 IoEventId);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_SetCurrentEventStatus
 *** 
 *** DESCRIPTION:
 ***     If a function is called during an event and cannot report its status via the result, this function can be used to report its status.
 *** 
 *** PARAMETERS:
 ***     Type                       Name    Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_ApiSuccessType  Status  Incoming argument: The status to report.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_PRIVATE_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_SetCurrentEventStatus(const VEOS_ApiSuccessType Status);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_ResetCurrentEventStatus
 *** 
 *** DESCRIPTION:
 ***     Resets the current event status.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_PRIVATE_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_ResetCurrentEventStatus(void);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_SimApi_GetCurrentEventStatus
 *** 
 *** DESCRIPTION:
 ***     If a function is called during an event and cannot report its status via the result, this function can be used to report its status.
 *** 
 *** PARAMETERS:
 ***     -/-
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_PRIVATE_API_OK)
extern VEOS_ApiSuccessType VEOS_SimApi_GetCurrentEventStatus(void);
#endif

/****************************************************************************************************************************************************\
 *** API functions for VEOS frame MessageApi
\****************************************************************************************************************************************************/

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_MsgApi_ShowMessageFormat
 *** 
 *** DESCRIPTION:
 ***     Transfers the specified message to the simulator backplane where it processed further on.
 *** 
 *** PARAMETERS:
 ***     Type                            Name      Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_MsgApi_SeverityType  Severity  Incoming argument: The severity of the message to submit.
 ***     const VEOS_boolean              Display   Incoming argument: If true, the message is displayed in the message browser, otherwise it is
 ***                                               written to the dSPACE Log.
 ***     const VEOS_char *               pFormat   Incoming argument: The formatted message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
extern VEOS_ApiSuccessType VEOS_MsgApi_ShowMessageFormat(
    const VEOS_MsgApi_SeverityType Severity,
    const VEOS_boolean Display,
    const VEOS_char * pFormat,
    ...
);
#endif

/****************************************************************************************************************************************************\
 *** FUNCTION:
 ***     VEOS_MsgApi_LogMessage
 *** 
 *** DESCRIPTION:
 ***     Transfers the specified message to the simulator backplane where it is written to the simulation log.
 *** 
 *** PARAMETERS:
 ***     Type               Name              Description
 ***     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ***     const VEOS_char *  pModuleStr        Incoming argument: The name of the sending module.
 ***     const VEOS_char *  pFunctionNameStr  Incoming argument: The function within the module reporting the error.
 ***     const VEOS_char *  pFormat           Incoming argument: The formatted message.
 *** 
 *** RETURNS:
 ***     VEOS_ApiSuccessType    If no error occurs, VEOS_E_OK will be returned. If any error occurs, an error code will be the result. See
 ***                            VEOS_Types.h for details.
\****************************************************************************************************************************************************/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
#if defined(VEOS_DEBUG)
extern VEOS_ApiSuccessType VEOS_MsgApi_LogMessage(
    const VEOS_char * pModuleStr,
    const VEOS_char * pFunctionNameStr,
    const VEOS_char * pFormat,
    ...
);
#endif
#endif


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* VEOS_INTERNAL_H */
/*--------------------------------------------------------------------------------------------------------------------------------------------------*\
  END OF FILE
\*--------------------------------------------------------------------------------------------------------------------------------------------------*/
