/*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** VEOS_InteractionFunctions.h
 *** 
 *** This file provides the function types for host functions and frame functions shared between the VEOS Frame and the VpuHost.
 *** 
 *** File generated on 2022-02-16
 *** 
 *** Generated by VEOS Frame API generator
 *** 
 *** VEOS Frame build revision          : 5.4.0.1269
 *** VEOS Frame interaction ABI version : 5.4.0.0
 *** GeneratorVersion                   : 5.4.0.0
 *** GeneratorTimeStamp                 : 2022-02-16 10:07:28 (UTC)
 *** Used APIs and ABI versions         :
 ***     BusApi                         : 5.0.0.0
 ***     ExperimentationApi             : 5.3.0.0
 ***     SimulationApi                  : 5.4.0.0
 ***     NotificationApi                : 5.0.0.0
 ***     MessageApi                     : 5.0.0.0
 ***     PortApi                        : 5.1.0.1
 ***     OsTaskHandlingApi              : 5.0.0.0
 *** 
 *** Copyright (c) 2022 by dSPACE GmbH, Paderborn, Germany.
 *** All Rights Reserved.
\*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef VEOS_INTERACTIONFUNCTIONS_V54_H
#define VEOS_INTERACTIONFUNCTIONS_V54_H

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  INCLUDES
\*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include "VEOS_Types.h"
#include "VEOS_InteractionTypes.h"
#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#include "stdarg.h"
#endif


#ifdef VEOS_FRAME_V54_NAMESPACE_BEGIN
VEOS_FRAME_V54_NAMESPACE_BEGIN
#endif

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  TYPEDEFS
\*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#ifdef VEOS_GUARD_INTERNAL_API_OK
/*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Host Function type definitions.
\*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*--------*
 * BusApi *
 *--------*/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Requests a bus connector handle from the bus services. Parameters: pChannel, Protocol, ChannelId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChGetHandleType)(VEOS_BusApi_ConnectorHandleType *, const VEOS_BusApi_InterfaceType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns a specific bus connector on. Parameters: Channel */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChActivateType)(const VEOS_BusApi_ConnectorHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns a specific bus connector off. Parameters: Channel */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChDeactivateType)(const VEOS_BusApi_ConnectorHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Get the current status of a specific bus connector. Parameters: Channel, pStatus */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChGetStatusType)(const VEOS_BusApi_ConnectorHandleType, VEOS_BusApi_ConnectorStatusType *);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the baud rate of a specific bus connector. Parameters: Channel, BaudRate */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChSetBaudrateType)(const VEOS_BusApi_ConnectorHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the baud rate for the specified channel. Parameters: Channel, pBaudRate */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChGetBaudrateType)(const VEOS_BusApi_ConnectorHandleType, VEOS_uint32 *);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Registers an event callback for a bus connector. This will be registered to the ChannelEvent for the specified status type. Parameters: Channel, Status, CbkArg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChRegisterStatusEventType)(const VEOS_BusApi_ConnectorHandleType, const VEOS_BusApi_ConnectorStatusType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Applies changes made to the connector. Parameters: Channel */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChApplyChangesType)(const VEOS_BusApi_ConnectorHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the specified channel to sleep. Parameters: Channel */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChSleepType)(const VEOS_BusApi_ConnectorHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns the specified bus message on. Parameters: Message */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgActivateType)(const VEOS_BusApi_MessageHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Turns the specified bus message off. Parameters: Message */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgDeactivateType)(const VEOS_BusApi_MessageHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the status of message. Parameters: Msg, pStatus */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgGetStatusType)(const VEOS_BusApi_MessageHandleType, VEOS_BusApi_MessageStatusType *);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the size of a queue. Parameters: Msg, Size */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgSetQueueSizeType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Registers a message received event handler function. Parameters: Msg, CbkArg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgRegisterReceiveEventType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Transmits the data of a message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgTransmitDataType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32, const VEOS_uint8 *, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Receives the data of a message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimestamp, pDirection, pMsgStatus */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgReadRxDataType)(const VEOS_BusApi_MessageHandleType, VEOS_uint32 *, VEOS_uint8 *, VEOS_uint32 *, VEOS_float64 *, VEOS_BusApi_MsgDirectionType *, VEOS_BusApi_MessageStatusType *);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Applies the changes made to the message. Parameters: Msg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgApplyChangesType)(const VEOS_BusApi_MessageHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Clears the message queue. Parameters: Msg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgClearQueueType)(const VEOS_BusApi_MessageHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the handle of the specified message mailbox handle. Parameters: pMsg, Channel */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgGetMailboxHandleType)(VEOS_BusApi_MessageHandleType *, const VEOS_BusApi_ConnectorHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the handle of the specified message. Parameters: pMsg, Channel */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgGetMonitorHandleType)(VEOS_BusApi_MessageHandleType *, const VEOS_BusApi_ConnectorHandleType);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Gets the queue length of the specified message. Parameters: Msg, pQueueLength */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgGetQueueLengthType)(const VEOS_BusApi_MessageHandleType, VEOS_uint32 *);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Sets the filters for the specified message. Parameters: Msg, FilterMask, FilterCode */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MsgSetFilterType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Transmits the data of a CAN message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc, TimeStamp, Format, Rtr, Brs */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_CanMsgTransmitDataType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32, const VEOS_uint8 *, const VEOS_uint32, const VEOS_float64, const VEOS_BusApi_CanMsgFormatType, const VEOS_boolean, const VEOS_boolean);
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Receives the data of a CAN message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimeStamp, pProcCount, pFormat, pEnabled, pRtr, pBrs, pDirection, pStatus */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_CanMsgReadRxDataType)(const VEOS_BusApi_MessageHandleType, VEOS_uint32 *, VEOS_uint8 *, VEOS_uint32 *, VEOS_float64 *, VEOS_uint32 *, VEOS_BusApi_CanMsgFormatType *, VEOS_boolean *, VEOS_boolean *, VEOS_boolean *, VEOS_BusApi_MsgDirectionType *, VEOS_BusApi_MessageStatusType *);
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Enables or disables the flexible data rate mode for the specific CAN message. Parameters: Msg, EnableFilter, Brs */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_CanMsgSetBaudRateFilterType)(const VEOS_BusApi_MessageHandleType, const VEOS_boolean, const VEOS_boolean);
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Gets the data phase baud rate for the flexible data rate mode for the specific CAN message. Parameters: Channel, pBaudRate */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_CanChGetDataPhaseBaudRateType)(const VEOS_BusApi_ConnectorHandleType, VEOS_uint32 *);
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* Sets the data phase baud rate for the flexible data rate mode for the specific CAN message. Parameters: Channel, BaudRate */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_CanChSetDataPhaseBaudRateType)(const VEOS_BusApi_ConnectorHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Transmit a LIN message header. Parameters: Msg, MsgId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_LinMsgTransmitHeaderType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Sets the maximum data length code. Parameters: Msg, Dlc */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_LinMsgSetMaxDlcType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Registers the message reception event. Parameters: Msg, CbkArg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_LinRegisterHeaderReceiveEventType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Transmits the data of a LIN message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc, Checksum, Mode */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_LinMsgTransmitDataType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32, const VEOS_uint8 *, const VEOS_uint32, const VEOS_uint8, const VEOS_BusApi_LinMsgChecksumModeType);
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Receives the data of a LIN message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimeStamp, pChecksum, pDirection, pStatus */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_LinMsgReadRxDataType)(const VEOS_BusApi_MessageHandleType, VEOS_uint32 *, VEOS_uint8 *, VEOS_uint32 *, VEOS_float64 *, VEOS_uint8 *, VEOS_BusApi_MsgDirectionType *, VEOS_BusApi_MessageStatusType *);
#endif


/*--------------------*
 * ExperimentationApi *
 *--------------------*/
#if defined(VEOS_GUARD_EXPAPIXCPSERVICEUSERS_OK)
/* XCP foreground service. Parameters: Instance, XcpServiceNumber */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_ExpApi_XcpServiceType)(void *, const VEOS_uint16);
#endif


/*---------------*
 * SimulationApi *
 *---------------*/
/* This function pauses the simulation after triggering of VPU is finished, i.e., same as calling the pause method from an external application. Parameters: Instance */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_PauseSimulationType)(void *);

#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* This function provides an internal API to stop the simulation or perform a clean, controlled shutdown of the local application process or the entire simulated application. Parameters: Instance, TerminationKind */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_TerminateSimulationType)(void *, const VEOS_SimApi_TerminationKindType);
#endif

#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* This function performs an immediate termination and considers the termination as erroneous. Parameters: Instance */
typedef void (VEOS_CDECL *VEOS_SimApi_TerminateSimulationFatalType)(void *);
#endif


/*-----------------*
 * NotificationApi *
 *-----------------*/
#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* Creates an asynchronous notification using the specified function to call. Parameters: Instance, pNotificationFct, pNotificationName, pNotificationId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_NotiApi_CreateNotificationType)(void *, VEOS_SimApi_InterruptCallbackFunctionType const, const VEOS_char *, VEOS_uint32 *);
#endif

#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* Starts the previously registered notification with the specified id. Parameters: Instance, NotificationId, NotificationOffset, NotificationPeriod */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_NotiApi_StartNotificationType)(void *, const VEOS_uint32, const VEOS_uint64, const VEOS_uint64);
#endif

#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* Cancels the previously registered and started notification with the specified id. Parameters: Instance, NotificationId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_NotiApi_CancelNotificationType)(void *, const VEOS_uint32);
#endif


/*------------*
 * MessageApi *
 *------------*/
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Transfers the specified message to the simulator backplane where it processed further on. Parameters: Instance, Severity, Display, pMessage */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_MsgApi_ShowMessageType)(void *, const VEOS_MsgApi_SeverityType, const VEOS_boolean, const VEOS_char *);
#endif

#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Transfers the specified message to the simulator backplane where it processed further on. Parameters: Instance, Severity, Display, pFormat, pArgs */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_MsgApi_ShowMessageVarArgsType)(void *, const VEOS_MsgApi_SeverityType, const VEOS_boolean, const VEOS_char *, va_list);
#endif
#endif

#if defined(VEOS_GUARD_SOURCECODEONLY_OK)
#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* Transfers the specified message to the simulator backplane where it is written to the simulation log. Parameters: Instance, pModuleStr, pFunctionNameStr, pFormat, pArgs */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_MsgApi_LogMessageVarArgsType)(void *, const VEOS_char *, const VEOS_char *, const VEOS_char *, va_list);
#endif
#endif


/*---------*
 * PortApi *
 *---------*/
#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortUInt8Type)(const VEOS_uint32, VEOS_uint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortSInt8Type)(const VEOS_uint32, VEOS_sint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortUInt16Type)(const VEOS_uint32, VEOS_uint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortSInt16Type)(const VEOS_uint32, VEOS_sint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortUInt32Type)(const VEOS_uint32, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortSInt32Type)(const VEOS_uint32, VEOS_sint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortUInt64Type)(const VEOS_uint32, VEOS_uint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortSInt64Type)(const VEOS_uint32, VEOS_sint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortBooleanType)(const VEOS_uint32, VEOS_boolean * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortFloat32Type)(const VEOS_uint32, VEOS_float32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadScalarPortFloat64Type)(const VEOS_uint32, VEOS_float64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortUInt8Type)(const VEOS_uint32, VEOS_uint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortSInt8Type)(const VEOS_uint32, VEOS_sint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortUInt16Type)(const VEOS_uint32, VEOS_uint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortSInt16Type)(const VEOS_uint32, VEOS_sint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortUInt32Type)(const VEOS_uint32, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortSInt32Type)(const VEOS_uint32, VEOS_sint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortUInt64Type)(const VEOS_uint32, VEOS_uint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortSInt64Type)(const VEOS_uint32, VEOS_sint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortBooleanType)(const VEOS_uint32, VEOS_boolean * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortFloat32Type)(const VEOS_uint32, VEOS_float32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVectorPortFloat64Type)(const VEOS_uint32, VEOS_float64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortUInt8Type)(const VEOS_uint32, VEOS_uint8 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortSInt8Type)(const VEOS_uint32, VEOS_sint8 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortUInt16Type)(const VEOS_uint32, VEOS_uint16 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortSInt16Type)(const VEOS_uint32, VEOS_sint16 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortUInt32Type)(const VEOS_uint32, VEOS_uint32 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortSInt32Type)(const VEOS_uint32, VEOS_sint32 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortUInt64Type)(const VEOS_uint32, VEOS_uint64 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortSInt64Type)(const VEOS_uint32, VEOS_sint64 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortBooleanType)(const VEOS_uint32, VEOS_boolean * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortFloat32Type)(const VEOS_uint32, VEOS_float32 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortFloat64Type)(const VEOS_uint32, VEOS_float64 * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_ReadVarSizePortBinaryType)(const VEOS_uint32, void * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_GetInPortBufferType)(const VEOS_uint32, const void * * const, VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortUInt8Type)(const VEOS_uint32, const VEOS_uint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortSInt8Type)(const VEOS_uint32, const VEOS_sint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortUInt16Type)(const VEOS_uint32, const VEOS_uint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortSInt16Type)(const VEOS_uint32, const VEOS_sint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortUInt32Type)(const VEOS_uint32, const VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortSInt32Type)(const VEOS_uint32, const VEOS_sint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortUInt64Type)(const VEOS_uint32, const VEOS_uint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortSInt64Type)(const VEOS_uint32, const VEOS_sint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortBooleanType)(const VEOS_uint32, const VEOS_boolean * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortFloat32Type)(const VEOS_uint32, const VEOS_float32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteScalarPortFloat64Type)(const VEOS_uint32, const VEOS_float64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortUInt8Type)(const VEOS_uint32, const VEOS_uint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortSInt8Type)(const VEOS_uint32, const VEOS_sint8 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortUInt16Type)(const VEOS_uint32, const VEOS_uint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortSInt16Type)(const VEOS_uint32, const VEOS_sint16 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortUInt32Type)(const VEOS_uint32, const VEOS_uint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortSInt32Type)(const VEOS_uint32, const VEOS_sint32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortUInt64Type)(const VEOS_uint32, const VEOS_uint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortSInt64Type)(const VEOS_uint32, const VEOS_sint64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortBooleanType)(const VEOS_uint32, const VEOS_boolean * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortFloat32Type)(const VEOS_uint32, const VEOS_float32 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVectorPortFloat64Type)(const VEOS_uint32, const VEOS_float64 * const);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortUInt8Type)(const VEOS_uint32, const VEOS_uint8 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortSInt8Type)(const VEOS_uint32, const VEOS_sint8 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortUInt16Type)(const VEOS_uint32, const VEOS_uint16 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortSInt16Type)(const VEOS_uint32, const VEOS_sint16 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortUInt32Type)(const VEOS_uint32, const VEOS_uint32 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortSInt32Type)(const VEOS_uint32, const VEOS_sint32 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortUInt64Type)(const VEOS_uint32, const VEOS_uint64 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortSInt64Type)(const VEOS_uint32, const VEOS_sint64 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortBooleanType)(const VEOS_uint32, const VEOS_boolean * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortFloat32Type)(const VEOS_uint32, const VEOS_float32 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortFloat64Type)(const VEOS_uint32, const VEOS_float64 * const, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_PORTAPIUSERS_OK)
/* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
typedef void (VEOS_FASTCALL *VEOS_PortApi_WriteVarSizePortBinaryType)(const VEOS_uint32, const void * const, const VEOS_uint32);
#endif


/*-------------------*
 * OsTaskHandlingApi *
 *-------------------*/
#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function creates a thread including the stacks of a new OS task. Parameters: Instance, pTaskName, StackSize, pTaskFct, TaskId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_OsTskApi_CreateThreadType)(void *, const VEOS_char *, const VEOS_uint32, VEOS_OsTskApi_TaskFunctionType const, VEOS_OsTskApi_TaskIdType *);
#endif

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function deletes the thread specified by the task ID. Parameters: Instance, TaskId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_OsTskApi_DeleteThreadType)(void *, const VEOS_OsTskApi_TaskIdType);
#endif

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function switches to the thread specified by the task ID. Parameters: Instance, TaskId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_OsTskApi_SwitchToThreadType)(void *, const VEOS_OsTskApi_TaskIdType);
#endif

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* This function returns the ID of the current thread. Parameters: Instance, TaskId */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_OsTskApi_GetCurrentThreadIdType)(void *, VEOS_OsTskApi_TaskIdType *);
#endif


/*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Frame Function type definitions.
\*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*--------*
 * BusApi *
 *--------*/
#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Event to be called when a message has been received. Parameters: Msg, Protocol, MsgId, CbkArg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_MessageReceivedEventType)(const VEOS_BusApi_MessageHandleType, const VEOS_BusApi_InterfaceType, const VEOS_uint32, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Called when the state of a bus connector is changed. Parameters: Channel, Protocol, Status, CbkArg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_ChannelStatusEventType)(const VEOS_BusApi_ConnectorHandleType, const VEOS_BusApi_InterfaceType, const VEOS_BusApi_ConnectorStatusType, const VEOS_uint32);
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Called when a LIN message header is received. Parameters: MsgHandle, MsgId, CbkArg */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_BusApi_LinHeaderReceivedEventType)(const VEOS_BusApi_MessageHandleType, const VEOS_uint32, const VEOS_uint32);
#endif


/*---------------*
 * SimulationApi *
 *---------------*/
/* This event occurs right after the application process has been downloaded. Parameters: ApplicationId, TargetAddressBase, ModelConfiguration, ModelCheckResult */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_DownloadEventType)(const VEOS_uint32, const void * const, const VEOS_uint32, VEOS_uint32 * const);

/* This event occurs when the simulator starts the application process. */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_StartEventType)(void);

/* This event occurs periodically, when the simulator has reached the timer. */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_TriggerEventType)(void);

/* This event occurs, when the simulator is about to stop the simulation for this application process. */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_StopEventType)(void);

/* This event occurs, when the simulator is about to reset the simulation for this application process. Parameters: VpuData */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_ResetEventType)(void * const);

/* This event occurs, when the simulator is about to unload the application process. */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_SimApi_UnloadEventType)(void);


/*-----------------*
 * NotificationApi *
 *-----------------*/
#if defined(VEOS_GUARD_NOTIFICATIONAPIUSERS_OK)
/* This event occurs, when the simulator sends an asynchronous notification event. Parameters: pNotificationFct */
typedef VEOS_ApiSuccessType (VEOS_CDECL *VEOS_NotiApi_NotificationEventType)(VEOS_SimApi_InterruptCallbackFunctionType const);
#endif


#endif /* VEOS_GUARD_INTERNAL_API_OK */

#ifdef VEOS_FRAME_V54_NAMESPACE_END
VEOS_FRAME_V54_NAMESPACE_END
#endif

#endif /* VEOS_INTERACTIONFUNCTIONS_V54_H */
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  END OF FILE
\*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
