/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** VEOS_InteractionTypes.h
 *** 
 *** This file provides the types for host function and frame function arguments shared between the VEOS Frame and the VpuHost.
 *** 
 *** File generated on 2022-02-16
 *** 
 *** Generated by VEOS Frame API generator
 *** 
 *** VEOS Frame build revision          : 5.4.0.1269
 *** VEOS Frame interaction ABI version : 5.4.0.0
 *** GeneratorVersion                   : 5.4.0.0
 *** GeneratorTimeStamp                 : 2022-02-16 10:07:28 (UTC)
 *** Used APIs and ABI versions         :
 ***     BusApi                         : 5.0.0.0
 ***     ExperimentationApi             : 5.3.0.0
 ***     SimulationApi                  : 5.4.0.0
 ***     NotificationApi                : 5.0.0.0
 ***     MessageApi                     : 5.0.0.0
 ***     PortApi                        : 5.1.0.1
 ***     OsTaskHandlingApi              : 5.0.0.0
 *** 
 *** Copyright (c) 2022 by dSPACE GmbH, Paderborn, Germany.
 *** All Rights Reserved.
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef VEOS_INTERACTIONTYPES_V54_H
#define VEOS_INTERACTIONTYPES_V54_H

/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  INCLUDES
\*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include "VEOS_Types.h"

#ifdef VEOS_FRAME_V54_NAMESPACE_BEGIN
VEOS_FRAME_V54_NAMESPACE_BEGIN
#endif

/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  TYPEDEFS
\*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Enumeration types for API BusApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Type of the simulated hardware interface */
typedef enum {
    VEOS_BusApi_InterfaceType_Idealized = 0x00, /* Idealized bus simulation */
    VEOS_BusApi_InterfaceType_CAN = 0x01,       /* CAN bus simulation */
    VEOS_BusApi_InterfaceType_LIN = 0x02        /* LIN bus simulation */
} VEOS_BusApi_InterfaceType;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Direction of the transferred message */
typedef enum {
    VEOS_BusApi_MsgDirectionType_Transmit = 0x00, /* Message is transmitted */
    VEOS_BusApi_MsgDirectionType_Receive = 0x01   /* Message is received */
} VEOS_BusApi_MsgDirectionType;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Status of the bus message channel and its connector bus connector */
typedef enum {
    VEOS_BusApi_ConnectorStatusType_Inactive = 0x00, /* Connector is not active */
    VEOS_BusApi_ConnectorStatusType_Active = 0x01,   /* Connector is active */
    VEOS_BusApi_ConnectorStatusType_Sleep = 0x02,    /* Connector is asleep */
    VEOS_BusApi_ConnectorStatusType_Wakeup = 0x03,   /* Connector is waking up */
    VEOS_BusApi_ConnectorStatusType_Passive = 0x04   /* Connector is passive */
} VEOS_BusApi_ConnectorStatusType;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Status of a message monitor */
typedef enum {
    VEOS_BusApi_MessageStatusType_NoData = 0x00,  /* The monitor has received no new data. Old data is still valid. */
    VEOS_BusApi_MessageStatusType_NewData = 0x01, /* The monitor has received new data. Old data must be invalidated. */
    VEOS_BusApi_MessageStatusType_Busy = 0x02,    /* The monitor is currently busy. */
    VEOS_BusApi_MessageStatusType_Error = 0x03,   /* The monitor has encountered an error. */
    VEOS_BusApi_MessageStatusType_Overrun = 0x04, /* The monitor has encountered an overrun. */
    VEOS_BusApi_MessageStatusType_Lost = 0x05     /* The monitor has lost frames. */
} VEOS_BusApi_MessageStatusType;
#endif

#if defined(VEOS_GUARD_CANBUSAPIUSERS_OK)
/* The format of a CAN message. */
typedef enum {
    VEOS_BusApi_CanMsgFormatType_Both = 0x00,       /* Both message formats are allowed */
    VEOS_BusApi_CanMsgFormatType_Standard = 0x01,   /* Standard CAN message format shall be used. */
    VEOS_BusApi_CanMsgFormatType_Extended = 0x02,   /* Extended CAN message format shall be used. */
    VEOS_BusApi_CanMsgFormatType_FdStandard = 0x03, /* Standard CAN message format with flexible data rate extensions shall be used. */
    VEOS_BusApi_CanMsgFormatType_FdExtended = 0x04  /* Extended CAN message format with flexible data rate extensions shall be used. */
} VEOS_BusApi_CanMsgFormatType;
#endif

#if defined(VEOS_GUARD_LINBUSAPIUSERS_OK)
/* Describes the way the checksum of a LIN message is calculated. */
typedef enum {
    VEOS_BusApi_LinMsgChecksumModeType_Classic = 0x00, /* The classic checksum (PID is not part of checksum). */
    VEOS_BusApi_LinMsgChecksumModeType_Enhanced = 0x01 /* The enhanced checksum (PID is part of the checksum). */
} VEOS_BusApi_LinMsgChecksumModeType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Primitive types for API BusApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Handle describing a message to transceive. */
typedef VEOS_uint32 VEOS_BusApi_MessageHandleType;
#endif

#if defined(VEOS_GUARD_BUSAPIUSERS_OK)
/* Handle describing a channel transceiving messages. */
typedef VEOS_uint32 VEOS_BusApi_ConnectorHandleType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Enumeration types for API ExpApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_EXPSVCUSERS_OK)
/* The raster type definitions for all rasters. */
typedef enum {
    VEOS_ExpApi_ServiceType_None = 0x00,        /* No raster type set. */
    VEOS_ExpApi_ServiceType_Daq = 0x01,         /* The DAQ raster service definition. */
    VEOS_ExpApi_ServiceType_Stimulation = 0x02, /* The stimulation raster definition. */
    VEOS_ExpApi_ServiceType_Bypass = 0x04       /* The definition of the bypassing service. */
} VEOS_ExpApi_ServiceType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Struct types for API ExpApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_EXPAPIXCPSERVICEUSERS_OK)
/* The XCP service configuration. */
typedef struct {
    VEOS_boolean XcpTimeStampSupported; /* Indicates whether XCP time stamp is supported or not. */
    VEOS_uint16 XcpTimeStampUnit; /* The XCP time stamp unit. */
    VEOS_uint16 XcpTimeStampTicks; /* The XCP time stamp ticks. */
    VEOS_sint64 XcpTimeStampSampleTimeNs; /* The XCP time stamp sample time in nano seconds. */
    VEOS_uint32 XcpMaxSegment; /* The XCP maximum segment for CAL page switching. If the value is zero, page switching is disabled. */
    VEOS_uint32 XcpMaxEventChannel; /* The XCP maximum event channel for DAQ. If the value is zero, the DAQ resource is not available. */
    VEOS_uint8 XcpBypassExtension; /* The bypass address extension value. If the value is zero, no address extension shall be used. */
    VEOS_uint32 XcpBypassOffset; /* The bypass address offset value. If the value is zero, no address offset shall be used. */
} VEOS_ExpApi_XcpServiceConfigType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Enumeration types for API SimApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* The type determining the kind of termination. */
typedef enum {
    VEOS_SimApi_TerminationKindType_StopSimulationAndFail = 0x01, /* The entire application shall be shutdown. Only "Unload" is possible afterwards. */
    VEOS_SimApi_TerminationKindType_StopProcess = 0x02,           /* The current application process shall be stopped. */
    VEOS_SimApi_TerminationKindType_StopSimulation = 0x03         /* The simulation shall be stopped normally. */
} VEOS_SimApi_TerminationKindType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Function pointer types for API SimApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_INTERRUPTHANDLING_OK)
/* The notification function type. */
typedef void (VEOS_CDECL *VEOS_SimApi_InterruptCallbackFunctionType)(void);
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Enumeration types for API MsgApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_INTERNAL_API_OK)
/* The severity of a submitted message. */
typedef enum {
    VEOS_MsgApi_SeverityType_Info = 0x00,    /* The message shall be displayed to the user as an info message. */
    VEOS_MsgApi_SeverityType_Warning = 0x01, /* The message shall be displayed to the user as a warning message. */
    VEOS_MsgApi_SeverityType_Error = 0x02    /* The message shall be displayed to the user as an error message. */
} VEOS_MsgApi_SeverityType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Primitive types for API OsTskApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#if defined(VEOS_GUARD_TASKHANDLINGAPIUSERS_OK)
/* Handle describing a task ID. */
typedef VEOS_sint32 VEOS_OsTskApi_TaskIdType;
#endif

/****************************************************************************************************************************************************************************************************************************************************************************************************************************************\
 *** Function pointer types for API OsTskApi
\****************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/* The task function type. */
typedef void (VEOS_CDECL *VEOS_OsTskApi_TaskFunctionType)(void);


#ifdef VEOS_FRAME_V54_NAMESPACE_END
VEOS_FRAME_V54_NAMESPACE_END
#endif

#endif /* VEOS_INTERACTIONTYPES_V54_H */
/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  END OF FILE
\*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
