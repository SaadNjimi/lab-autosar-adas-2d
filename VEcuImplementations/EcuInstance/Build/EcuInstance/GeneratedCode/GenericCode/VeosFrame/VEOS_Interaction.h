/**********************************************************************************************************************************************************************************************************************************************\
 *** VEOS_Interaction.h
 *** 
 *** This file provides the interaction types used for the interaction between the VEOS Frame and the VpuHost.
 *** 
 *** File generated on 2022-02-16
 *** 
 *** Generated by VEOS Frame API generator
 *** 
 *** VEOS Frame build revision          : 5.4.0.1269
 *** VEOS Frame interaction ABI version : 5.4.0.0
 *** GeneratorVersion                   : 5.4.0.0
 *** GeneratorTimeStamp                 : 2022-02-16 10:07:28 (UTC)
 *** Used APIs and ABI versions         :
 ***     BusApi                         : 5.0.0.0
 ***     ExperimentationApi             : 5.3.0.0
 ***     SimulationApi                  : 5.4.0.0
 ***     NotificationApi                : 5.0.0.0
 ***     MessageApi                     : 5.0.0.0
 ***     PortApi                        : 5.1.0.1
 ***     OsTaskHandlingApi              : 5.0.0.0
 *** 
 *** Copyright (c) 2022 by dSPACE GmbH, Paderborn, Germany.
 *** All Rights Reserved.
\**********************************************************************************************************************************************************************************************************************************************/

#ifndef VEOS_INTERACTION_V54_H
#define VEOS_INTERACTION_V54_H

/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  INCLUDES
\*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include "VEOS_Types.h"
#include "VEOS_InteractionTypes.h"
#include "VEOS_InteractionFunctions.h"

#ifdef VEOS_FRAME_V54_NAMESPACE_BEGIN
VEOS_FRAME_V54_NAMESPACE_BEGIN
#endif

/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  TYPEDEFS
\*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/**********************************************************************************************************************************************************************************************************************************************\
 *** Host Function structure type definitions.
\**********************************************************************************************************************************************************************************************************************************************/
/*--------*
 * BusApi *
 *--------*/
typedef struct {
    VEOS_BusApi_ChGetHandleType * VEOS_BusApi_ChGetHandle; /* Requests a bus connector handle from the bus services. Parameters: pChannel, Protocol, ChannelId */
    VEOS_BusApi_ChActivateType * VEOS_BusApi_ChActivate; /* Turns a specific bus connector on. Parameters: Channel */
    VEOS_BusApi_ChDeactivateType * VEOS_BusApi_ChDeactivate; /* Turns a specific bus connector off. Parameters: Channel */
    VEOS_BusApi_ChGetStatusType * VEOS_BusApi_ChGetStatus; /* Get the current status of a specific bus connector. Parameters: Channel, pStatus */
    VEOS_BusApi_ChSetBaudrateType * VEOS_BusApi_ChSetBaudrate; /* Sets the baud rate of a specific bus connector. Parameters: Channel, BaudRate */
    VEOS_BusApi_ChGetBaudrateType * VEOS_BusApi_ChGetBaudrate; /* Gets the baud rate for the specified channel. Parameters: Channel, pBaudRate */
    VEOS_BusApi_ChRegisterStatusEventType * VEOS_BusApi_ChRegisterStatusEvent; /* Registers an event callback for a bus connector. This will be registered to the ChannelEvent for the specified status type. Parameters: Channel, Status, CbkArg */
    VEOS_BusApi_ChApplyChangesType * VEOS_BusApi_ChApplyChanges; /* Applies changes made to the connector. Parameters: Channel */
    VEOS_BusApi_ChSleepType * VEOS_BusApi_ChSleep; /* Sets the specified channel to sleep. Parameters: Channel */
    VEOS_BusApi_MsgActivateType * VEOS_BusApi_MsgActivate; /* Turns the specified bus message on. Parameters: Message */
    VEOS_BusApi_MsgDeactivateType * VEOS_BusApi_MsgDeactivate; /* Turns the specified bus message off. Parameters: Message */
    VEOS_BusApi_MsgGetStatusType * VEOS_BusApi_MsgGetStatus; /* Gets the status of message. Parameters: Msg, pStatus */
    VEOS_BusApi_MsgSetQueueSizeType * VEOS_BusApi_MsgSetQueueSize; /* Sets the size of a queue. Parameters: Msg, Size */
    VEOS_BusApi_MsgRegisterReceiveEventType * VEOS_BusApi_MsgRegisterReceiveEvent; /* Registers a message received event handler function. Parameters: Msg, CbkArg */
    VEOS_BusApi_MsgTransmitDataType * VEOS_BusApi_MsgTransmitData; /* Transmits the data of a message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc */
    VEOS_BusApi_MsgReadRxDataType * VEOS_BusApi_MsgReadRxData; /* Receives the data of a message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimestamp, pDirection, pMsgStatus */
    VEOS_BusApi_MsgApplyChangesType * VEOS_BusApi_MsgApplyChanges; /* Applies the changes made to the message. Parameters: Msg */
    VEOS_BusApi_MsgClearQueueType * VEOS_BusApi_MsgClearQueue; /* Clears the message queue. Parameters: Msg */
    VEOS_BusApi_MsgGetMailboxHandleType * VEOS_BusApi_MsgGetMailboxHandle; /* Gets the handle of the specified message mailbox handle. Parameters: pMsg, Channel */
    VEOS_BusApi_MsgGetMonitorHandleType * VEOS_BusApi_MsgGetMonitorHandle; /* Gets the handle of the specified message. Parameters: pMsg, Channel */
    VEOS_BusApi_MsgGetQueueLengthType * VEOS_BusApi_MsgGetQueueLength; /* Gets the queue length of the specified message. Parameters: Msg, pQueueLength */
    VEOS_BusApi_MsgSetFilterType * VEOS_BusApi_MsgSetFilter; /* Sets the filters for the specified message. Parameters: Msg, FilterMask, FilterCode */
    VEOS_BusApi_CanMsgTransmitDataType * VEOS_BusApi_CanMsgTransmitData; /* Transmits the data of a CAN message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc, TimeStamp, Format, Rtr, Brs */
    VEOS_BusApi_CanMsgReadRxDataType * VEOS_BusApi_CanMsgReadRxData; /* Receives the data of a CAN message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimeStamp, pProcCount, pFormat, pEnabled, pRtr, pBrs, pDirection, pStatus */
    VEOS_BusApi_CanMsgSetBaudRateFilterType * VEOS_BusApi_CanMsgSetBaudRateFilter; /* Enables or disables the flexible data rate mode for the specific CAN message. Parameters: Msg, EnableFilter, Brs */
    VEOS_BusApi_CanChGetDataPhaseBaudRateType * VEOS_BusApi_CanChGetDataPhaseBaudRate; /* Gets the data phase baud rate for the flexible data rate mode for the specific CAN message. Parameters: Channel, pBaudRate */
    VEOS_BusApi_CanChSetDataPhaseBaudRateType * VEOS_BusApi_CanChSetDataPhaseBaudRate; /* Sets the data phase baud rate for the flexible data rate mode for the specific CAN message. Parameters: Channel, BaudRate */
    VEOS_BusApi_LinMsgTransmitHeaderType * VEOS_BusApi_LinMsgTransmitHeader; /* Transmit a LIN message header. Parameters: Msg, MsgId */
    VEOS_BusApi_LinMsgSetMaxDlcType * VEOS_BusApi_LinMsgSetMaxDlc; /* Sets the maximum data length code. Parameters: Msg, Dlc */
    VEOS_BusApi_LinRegisterHeaderReceiveEventType * VEOS_BusApi_LinRegisterHeaderReceiveEvent; /* Registers the message reception event. Parameters: Msg, CbkArg */
    VEOS_BusApi_LinMsgTransmitDataType * VEOS_BusApi_LinMsgTransmitData; /* Transmits the data of a LIN message to the simulation backplane. Parameters: Msg, MsgId, pData, Dlc, Checksum, Mode */
    VEOS_BusApi_LinMsgReadRxDataType * VEOS_BusApi_LinMsgReadRxData; /* Receives the data of a LIN message from the simulation backplane. Parameters: Msg, pMsgId, pData, pDlc, pTimeStamp, pChecksum, pDirection, pStatus */
} BusApi_HostFunctions;

/*--------------------*
 * ExperimentationApi *
 *--------------------*/
typedef struct {
    VEOS_ExpApi_XcpServiceType * VEOS_ExpApi_XcpService; /* XCP foreground service. Parameters: Instance, XcpServiceNumber */
} ExpApi_HostFunctions;

/*---------------*
 * SimulationApi *
 *---------------*/
typedef struct {
    VEOS_PauseSimulationType * VEOS_PauseSimulation; /* This function pauses the simulation after triggering of VPU is finished, i.e., same as calling the pause method from an external application. Parameters: Instance */
    VEOS_SimApi_TerminateSimulationType * VEOS_SimApi_TerminateSimulation; /* This function provides an internal API to stop the simulation or perform a clean, controlled shutdown of the local application process or the entire simulated application. Parameters: Instance, TerminationKind */
    VEOS_SimApi_TerminateSimulationFatalType * VEOS_SimApi_TerminateSimulationFatal; /* This function performs an immediate termination and considers the termination as erroneous. Parameters: Instance */
} SimApi_HostFunctions;

/*-----------------*
 * NotificationApi *
 *-----------------*/
typedef struct {
    VEOS_NotiApi_CreateNotificationType * VEOS_NotiApi_CreateNotification; /* Creates an asynchronous notification using the specified function to call. Parameters: Instance, pNotificationFct, pNotificationName, pNotificationId */
    VEOS_NotiApi_StartNotificationType * VEOS_NotiApi_StartNotification; /* Starts the previously registered notification with the specified id. Parameters: Instance, NotificationId, NotificationOffset, NotificationPeriod */
    VEOS_NotiApi_CancelNotificationType * VEOS_NotiApi_CancelNotification; /* Cancels the previously registered and started notification with the specified id. Parameters: Instance, NotificationId */
} NotiApi_HostFunctions;

/*------------*
 * MessageApi *
 *------------*/
typedef struct {
    VEOS_MsgApi_ShowMessageType * VEOS_MsgApi_ShowMessage; /* Transfers the specified message to the simulator backplane where it processed further on. Parameters: Instance, Severity, Display, pMessage */
    VEOS_MsgApi_ShowMessageVarArgsType * VEOS_MsgApi_ShowMessageVarArgs; /* Transfers the specified message to the simulator backplane where it processed further on. Parameters: Instance, Severity, Display, pFormat, pArgs */
    VEOS_MsgApi_LogMessageVarArgsType * VEOS_MsgApi_LogMessageVarArgs; /* Transfers the specified message to the simulator backplane where it is written to the simulation log. Parameters: Instance, pModuleStr, pFunctionNameStr, pFormat, pArgs */
} MsgApi_HostFunctions;

/*---------*
 * PortApi *
 *---------*/
typedef struct {
    VEOS_PortApi_ReadScalarPortUInt8Type * VEOS_PortApi_ReadScalarPortUInt8; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortSInt8Type * VEOS_PortApi_ReadScalarPortSInt8; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortUInt16Type * VEOS_PortApi_ReadScalarPortUInt16; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortSInt16Type * VEOS_PortApi_ReadScalarPortSInt16; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortUInt32Type * VEOS_PortApi_ReadScalarPortUInt32; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortSInt32Type * VEOS_PortApi_ReadScalarPortSInt32; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortUInt64Type * VEOS_PortApi_ReadScalarPortUInt64; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortSInt64Type * VEOS_PortApi_ReadScalarPortSInt64; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortBooleanType * VEOS_PortApi_ReadScalarPortBoolean; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortFloat32Type * VEOS_PortApi_ReadScalarPortFloat32; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadScalarPortFloat64Type * VEOS_PortApi_ReadScalarPortFloat64; /* Function used to read the value of the single port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortUInt8Type * VEOS_PortApi_ReadVectorPortUInt8; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortSInt8Type * VEOS_PortApi_ReadVectorPortSInt8; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortUInt16Type * VEOS_PortApi_ReadVectorPortUInt16; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortSInt16Type * VEOS_PortApi_ReadVectorPortSInt16; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortUInt32Type * VEOS_PortApi_ReadVectorPortUInt32; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortSInt32Type * VEOS_PortApi_ReadVectorPortSInt32; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortUInt64Type * VEOS_PortApi_ReadVectorPortUInt64; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortSInt64Type * VEOS_PortApi_ReadVectorPortSInt64; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortBooleanType * VEOS_PortApi_ReadVectorPortBoolean; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortFloat32Type * VEOS_PortApi_ReadVectorPortFloat32; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVectorPortFloat64Type * VEOS_PortApi_ReadVectorPortFloat64; /* Function used to read the value of the vector port element from the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_ReadVarSizePortUInt8Type * VEOS_PortApi_ReadVarSizePortUInt8; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortSInt8Type * VEOS_PortApi_ReadVarSizePortSInt8; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortUInt16Type * VEOS_PortApi_ReadVarSizePortUInt16; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortSInt16Type * VEOS_PortApi_ReadVarSizePortSInt16; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortUInt32Type * VEOS_PortApi_ReadVarSizePortUInt32; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortSInt32Type * VEOS_PortApi_ReadVarSizePortSInt32; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortUInt64Type * VEOS_PortApi_ReadVarSizePortUInt64; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortSInt64Type * VEOS_PortApi_ReadVarSizePortSInt64; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortBooleanType * VEOS_PortApi_ReadVarSizePortBoolean; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortFloat32Type * VEOS_PortApi_ReadVarSizePortFloat32; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortFloat64Type * VEOS_PortApi_ReadVarSizePortFloat64; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_ReadVarSizePortBinaryType * VEOS_PortApi_ReadVarSizePortBinary; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_GetInPortBufferType * VEOS_PortApi_GetInPortBuffer; /* Function used to read the value of the variable size vector port element from the shared buffer. Parameters: AccessIndex, pValue, pNumberOfElements */
    VEOS_PortApi_WriteScalarPortUInt8Type * VEOS_PortApi_WriteScalarPortUInt8; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortSInt8Type * VEOS_PortApi_WriteScalarPortSInt8; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortUInt16Type * VEOS_PortApi_WriteScalarPortUInt16; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortSInt16Type * VEOS_PortApi_WriteScalarPortSInt16; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortUInt32Type * VEOS_PortApi_WriteScalarPortUInt32; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortSInt32Type * VEOS_PortApi_WriteScalarPortSInt32; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortUInt64Type * VEOS_PortApi_WriteScalarPortUInt64; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortSInt64Type * VEOS_PortApi_WriteScalarPortSInt64; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortBooleanType * VEOS_PortApi_WriteScalarPortBoolean; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortFloat32Type * VEOS_PortApi_WriteScalarPortFloat32; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteScalarPortFloat64Type * VEOS_PortApi_WriteScalarPortFloat64; /* Function used to write the value of the single port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortUInt8Type * VEOS_PortApi_WriteVectorPortUInt8; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortSInt8Type * VEOS_PortApi_WriteVectorPortSInt8; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortUInt16Type * VEOS_PortApi_WriteVectorPortUInt16; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortSInt16Type * VEOS_PortApi_WriteVectorPortSInt16; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortUInt32Type * VEOS_PortApi_WriteVectorPortUInt32; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortSInt32Type * VEOS_PortApi_WriteVectorPortSInt32; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortUInt64Type * VEOS_PortApi_WriteVectorPortUInt64; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortSInt64Type * VEOS_PortApi_WriteVectorPortSInt64; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortBooleanType * VEOS_PortApi_WriteVectorPortBoolean; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortFloat32Type * VEOS_PortApi_WriteVectorPortFloat32; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVectorPortFloat64Type * VEOS_PortApi_WriteVectorPortFloat64; /* Function used to write the value of the vector port element to the shared buffer. Parameters: AccessIndex, pValue */
    VEOS_PortApi_WriteVarSizePortUInt8Type * VEOS_PortApi_WriteVarSizePortUInt8; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortSInt8Type * VEOS_PortApi_WriteVarSizePortSInt8; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortUInt16Type * VEOS_PortApi_WriteVarSizePortUInt16; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortSInt16Type * VEOS_PortApi_WriteVarSizePortSInt16; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortUInt32Type * VEOS_PortApi_WriteVarSizePortUInt32; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortSInt32Type * VEOS_PortApi_WriteVarSizePortSInt32; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortUInt64Type * VEOS_PortApi_WriteVarSizePortUInt64; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortSInt64Type * VEOS_PortApi_WriteVarSizePortSInt64; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortBooleanType * VEOS_PortApi_WriteVarSizePortBoolean; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortFloat32Type * VEOS_PortApi_WriteVarSizePortFloat32; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortFloat64Type * VEOS_PortApi_WriteVarSizePortFloat64; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
    VEOS_PortApi_WriteVarSizePortBinaryType * VEOS_PortApi_WriteVarSizePortBinary; /* Function used to write the value of the variable size vector port element to the shared buffer. Parameters: AccessIndex, pValue, NumberOfElements */
} PortApi_HostFunctions;

/*-------------------*
 * OsTaskHandlingApi *
 *-------------------*/
typedef struct {
    VEOS_OsTskApi_CreateThreadType * VEOS_OsTskApi_CreateThread; /* This function creates a thread including the stacks of a new OS task. Parameters: Instance, pTaskName, StackSize, pTaskFct, TaskId */
    VEOS_OsTskApi_DeleteThreadType * VEOS_OsTskApi_DeleteThread; /* This function deletes the thread specified by the task ID. Parameters: Instance, TaskId */
    VEOS_OsTskApi_SwitchToThreadType * VEOS_OsTskApi_SwitchToThread; /* This function switches to the thread specified by the task ID. Parameters: Instance, TaskId */
    VEOS_OsTskApi_GetCurrentThreadIdType * VEOS_OsTskApi_GetCurrentThreadId; /* This function returns the ID of the current thread. Parameters: Instance, TaskId */
} OsTskApi_HostFunctions;


/**********************************************************************************************************************************************************************************************************************************************\
 *** Frame Function structure type definitions.
\**********************************************************************************************************************************************************************************************************************************************/
/*--------*
 * BusApi *
 *--------*/
typedef struct {
    VEOS_BusApi_MessageReceivedEventType VEOS_BusApi_MessageReceivedEvent; /* Event to be called when a message has been received. Parameters: Msg, Protocol, MsgId, CbkArg */
    VEOS_BusApi_ChannelStatusEventType VEOS_BusApi_ChannelStatusEvent; /* Called when the state of a bus connector is changed. Parameters: Channel, Protocol, Status, CbkArg */
    VEOS_BusApi_LinHeaderReceivedEventType VEOS_BusApi_LinHeaderReceivedEvent; /* Called when a LIN message header is received. Parameters: MsgHandle, MsgId, CbkArg */
} BusApi_FrameFunctions;

/*---------------*
 * SimulationApi *
 *---------------*/
typedef struct {
    VEOS_SimApi_DownloadEventType VEOS_SimApi_DownloadEvent; /* This event occurs right after the application process has been downloaded. Parameters: ApplicationId, TargetAddressBase, ModelConfiguration, ModelCheckResult */
    VEOS_SimApi_StartEventType VEOS_SimApi_StartEvent; /* This event occurs when the simulator starts the application process. */
    VEOS_SimApi_TriggerEventType VEOS_SimApi_TriggerEvent; /* This event occurs periodically, when the simulator has reached the timer. */
    VEOS_SimApi_StopEventType VEOS_SimApi_StopEvent; /* This event occurs, when the simulator is about to stop the simulation for this application process. */
    VEOS_SimApi_ResetEventType VEOS_SimApi_ResetEvent; /* This event occurs, when the simulator is about to reset the simulation for this application process. Parameters: VpuData */
    VEOS_SimApi_UnloadEventType VEOS_SimApi_UnloadEvent; /* This event occurs, when the simulator is about to unload the application process. */
} SimApi_FrameFunctions;

/*-----------------*
 * NotificationApi *
 *-----------------*/
typedef struct {
    VEOS_NotiApi_NotificationEventType VEOS_NotiApi_NotificationEvent; /* This event occurs, when the simulator sends an asynchronous notification event. Parameters: pNotificationFct */
} NotiApi_FrameFunctions;


/**********************************************************************************************************************************************************************************************************************************************\
 *** API structure type definitions.
\**********************************************************************************************************************************************************************************************************************************************/
/*--------*
 * BusApi *
 *--------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    BusApi_HostFunctions HostFunctions; /* Collection of host functions for BusApi. */
    BusApi_FrameFunctions FrameFunctions; /* Collection of frame functions for BusApi. */
    volatile VEOS_uint8 * DisconnectCompletely; /* Transferred global variable: Disconnect from all external connections. */
    volatile VEOS_uint8 * DisconnectBuses; /* Calibratable variable: Disconnect all bus connections. */
} VEOS_BusApiType;

/*--------------------*
 * ExperimentationApi *
 *--------------------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    ExpApi_HostFunctions HostFunctions; /* Collection of host functions for ExperimentationApi. */
    const VEOS_ExpApi_XcpServiceConfigType * XcpServiceConfig; /* Transferred global variable: The XCP service configuration. */
    void * * Instance; /* Transferred global variable: Pointer to the ExpApi instance. */
} VEOS_ExperimentationApiType;

/*---------------*
 * SimulationApi *
 *---------------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    SimApi_HostFunctions HostFunctions; /* Collection of host functions for SimulationApi. */
    SimApi_FrameFunctions FrameFunctions; /* Collection of frame functions for SimulationApi. */
    VEOS_float64 * CurrentSimulationTime; /* Transferred global variable: Current local simulation time for the local VPU. */
    VEOS_sint64 * CurrentSimulationCounter_1ns; /* Transferred global variable: Current local simulation ticks counter for the local VPU in nano seconds. */
    volatile VEOS_float64 * RealTimeDeviation; /* Transferred global variable: The difference between the simulated approximated real time and the simulation time. */
    void * * Instance; /* Transferred global variable: Pointer to the SimApi instance. */
    volatile VEOS_uint8 * DisconnectCompletely; /* Calibratable variable: Disconnect from all external connections. */
} VEOS_SimulationApiType;

/*-----------------*
 * NotificationApi *
 *-----------------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    NotiApi_HostFunctions HostFunctions; /* Collection of host functions for NotificationApi. */
    NotiApi_FrameFunctions FrameFunctions; /* Collection of frame functions for NotificationApi. */
    void * * Instance; /* Transferred global variable: Pointer to the NotiApi instance. */
} VEOS_NotificationApiType;

/*------------*
 * MessageApi *
 *------------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    MsgApi_HostFunctions HostFunctions; /* Collection of host functions for MessageApi. */
    void * * Instance; /* Transferred global variable: Pointer to the MsgApi instance. */
} VEOS_MessageApiType;

/*---------*
 * PortApi *
 *---------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    PortApi_HostFunctions HostFunctions; /* Collection of host functions for PortApi. */
    volatile VEOS_uint8 * DisconnectCompletely; /* Transferred global variable: Disconnect from all external connections. */
    volatile VEOS_uint8 * DisconnectPorts; /* Calibratable variable: Disconnect all port connections. */
} VEOS_PortApiType;

/*-------------------*
 * OsTaskHandlingApi *
 *-------------------*/
typedef struct {
    VEOS_uint64 AbiVersion; /* The ABI version of this API. */
    OsTskApi_HostFunctions HostFunctions; /* Collection of host functions for OsTaskHandlingApi. */
    void * * Instance; /* Transferred global variable: Pointer to the OsTskApi instance. */
} VEOS_OsTaskHandlingApiType;

/*---------------------*
 * DsCanApi (external) *
 *---------------------*/
typedef struct DsCan_Api_s DsCan_ApiType;

/*---------------------*
 * DsLinApi (external) *
 *---------------------*/
typedef struct DsLin_Api_s DsLin_ApiType;

/*---------------------*
 * DsEthApi (external) *
 *---------------------*/
typedef struct DsEth_Api_s DsEth_ApiType;

/*------------------------*
 * DsSocketApi (external) *
 *------------------------*/
typedef struct DsSocket_Api_s DsSocket_ApiType;

/*----------------------*
 * DsPcapApi (external) *
 *----------------------*/
typedef struct DsPcap_Api_s DsPcap_ApiType;

/*-----------------------------*
 * SmartServicesApi (external) *
 *-----------------------------*/
typedef struct SmartServices_Api_s SmartServices_ApiType;


/**********************************************************************************************************************************************************************************************************************************************\
 *** VEOS Interaction structure type definitions.
\**********************************************************************************************************************************************************************************************************************************************/
typedef struct {
    VEOS_uint64 AbiVersion; /* The VEOS frame interaction root ABI version. */
    const VEOS_BusApiType * BusApi; /* Reference to the BusApi. */
    const VEOS_ExperimentationApiType * ExpApi; /* Reference to the ExperimentationApi. */
    const VEOS_SimulationApiType * SimApi; /* Reference to the SimulationApi. */
    const VEOS_NotificationApiType * NotiApi; /* Reference to the NotificationApi. */
    const VEOS_MessageApiType * MsgApi; /* Reference to the MessageApi. */
    const VEOS_PortApiType * PortApi; /* Reference to the PortApi. */
    const VEOS_OsTaskHandlingApiType * OsTskApi; /* Reference to the OsTaskHandlingApi. */
    const DsCan_ApiType * DsCanApi; /* Reference to the external DsCanApi. */
    const DsLin_ApiType * DsLinApi; /* Reference to the external DsLinApi. */
    const DsEth_ApiType * DsEthApi; /* Reference to the external DsEthApi. */
    const DsSocket_ApiType * DsSocketApi; /* Reference to the external DsSocketApi. */
    const DsPcap_ApiType * DsPcapApi; /* Reference to the external DsPcapApi. */
    const SmartServices_ApiType * SmartServicesApi; /* Reference to the external SmartServicesApi. */
    const VEOS_uint16 * FrameVersion; /* The VEOS frame build version. */
} VeosInteractionType;

#ifdef VEOS_FRAME_V54_NAMESPACE_END
VEOS_FRAME_V54_NAMESPACE_END
#endif

#endif /* VEOS_INTERACTION_V54_H */
/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*\
  END OF FILE
\*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
