/**************************************************************************************************\
 *** Os_Cfg_generated.h
 *** 
 *** This file contains the configuration for the OSEK Operating System module.
 *** 
 *** Generated by dSPACE VEOS 5.4
 *** 
 *** Using AutosarOs code generator 5.4.0.59380
 *** 
 *** Generated on: 2025-06-11 10:52:47
 *** 
 *** Copyright 2025 by dSPACE GmbH, Paderborn, Germany
 *** All Rights Reserved.
\**************************************************************************************************/

#ifndef OS_CFG_GENERATED_H
#define OS_CFG_GENERATED_H

/*------------------------------------------------------------------------------------------------*\
  INCLUDES
\*------------------------------------------------------------------------------------------------*/

/* OS include files. */
#include "Os_Cfg.h"

/*------------------------------------------------------------------------------------------------*\
  DEFINES
\*------------------------------------------------------------------------------------------------*/

/* Definition of the target platform */
#define OS_PLATFORM_X86_64

/* Definition of local configuration */
#define OS_PRIO_ORDER              OS_SYS_PRIO_ORDERING_ASCENDING /* Define ascending or      
                                                                   * descending order of       
                                                                   * priorities. In ascending  
                                                                   * mode 1 is the lowest      
                                                                   * priority and in descending
                                                                   * mode 1 is the highest     
                                                                   * priority. */
#define DUMMY_ISR                  0                              /* OS interrupt service     
                                                                   * routines related settings. */
#define OS_STARTOS_IMMEDIATERETURN

/* Definition of idle task. */
#define IDLE_LOOP            ((TaskType)4)
#define IDLE_LOOP_PRIO       OS_TASKPRIORITY_MIN
#define IDLE_LOOP_ACTIVATION 1
#define IDLE_LOOP_SCHEDULE   OS_TASKPREEMPTION_FULL

/* Defines used to configure the generic header files of OS. */
#define NUMBER_OF_APPMODES             1
#define NUMBER_OF_TASKS                5
#define NUMBER_OF_ISRS                 1
#define NUMBER_OF_COUNTERS             1
#define NUMBER_OF_HW_COUNTERS          1
#define NUMBER_OF_ALARMS               2
#define NUMBER_OF_ALARMS_FOR_CTRCB     2
#define NUMBER_OF_RESOURCES            1
#define NUMBER_OF_SCHEDULE_TABLES      0
#define NUMBER_OF_EXPIRY_POINTS        0
#define NUMBER_OF_ALL_SCHED_TBL_TASKS  0
#define NUMBER_OF_ALL_SCHED_TBL_EVENTS 0
#define NUMBER_OF_OS_APPLICATIONS      0
#define NUMBER_OF_SPINLOCKS            0
#define NUMBER_OF_IOCS                 0
#define NUMBER_OF_CORES                0
#define NUMBER_OF_PERIPHERAL_AREAS     0
#define OS_TASK_STIM_OFFSET            1 /* Offset of the fastest cyclic basic task to the    
                                          * system timer. */

#if NUMBER_OF_APPMODES > 0
/* Basic sampling tasks for all application modes */
#define BASIC_RATE_TASKS  \
{ \
    \
}
#endif


/* Definition of task priorities. */
#define EcuM_StartupTwoTask_PRIO   ((Os_PrioType) 2147483647) /* Priority for Task            
                                                               * EcuM_StartupTwoTask */
#define MainFunctionTask3_1ms_PRIO ((Os_PrioType) 15)         /* Priority for Task            
                                                               * MainFunctionTask3_1ms */
#define Task0_10ms_PRIO            ((Os_PrioType) 10)         /* Priority for Task Task0_10ms */
#define Task1_PRIO                 ((Os_PrioType) 10)         /* Priority for Task Task1 */


/* Task control block for operating system configurations with context switch and stack support. */
#define OS_TASK_CONTROL_BLOCK  \
{ \
    { /* EcuM_StartupTwoTask */ \
        16384,                    /* Stack size. */ \
        EcuM_StartupTwoTask_PRIO, /* Actual priority. */ \
        SUSPENDED,                /* Task state. */ \
        OS_FALSE,                 /* Task is basic task. */ \
        ((EventMaskType) 0),      /* Events that are set (run-time value). */ \
        ((EventMaskType) 0),      /* Events waiting for (run-time value). */ \
        0,                        /* Activation order. */ \
        IDLE_LOOP,                /* Interrupted task. */ \
        0,                        /* Resource level counter. */ \
        0                         /* Number of activations (run-time value). */, \
        { \
            OS_FALSE  /* Task is not auto-started. */ \
        }, \
        { \
            OS_TRUE \
        }, \
        EcuM_StartupTwoTask_PRIO,                       /* Task priority. */ \
        OS_TASKPREEMPTION_NONE,                         /* Task schedule type. */ \
        1,                                              /* Maximum number of parallel activation \
                                                         * requests. */ \
        OS_FALSE,                                       /* Indicate that the task interrupted */ \
        Os_TaskInternal_EcuM_StartupTwoTask,            /* Task function. */ \
        0,                                              /* Associated measurement raster to be \
                                                         * invoked before the task invocation */ \
        0,                                              /* Associated measurement raster to be \
                                                         * invoked after the task invocation */ \
        &(g_NumberOfTaskOverruns[EcuM_StartupTwoTask]), /* Associated overrun counter. */ \
        OS_TRUE,                                        /* Termination flag */ \
        "EcuM_StartupTwoTask",                          /* Task name. */ \
        EcuM_StartupTwoTask,                            /* Task id */ \
        OS_READYTASKS_INVALID_IDX,                      /* Ready-tasks heap index */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION             /* No application specified. */ \
    }, \
    { /* MainFunctionTask3_1ms */ \
        16384,                      /* Stack size. */ \
        MainFunctionTask3_1ms_PRIO, /* Actual priority. */ \
        SUSPENDED,                  /* Task state. */ \
        OS_FALSE,                   /* Task is basic task. */ \
        ((EventMaskType) 0),        /* Events that are set (run-time value). */ \
        ((EventMaskType) 0),        /* Events waiting for (run-time value). */ \
        0,                          /* Activation order. */ \
        IDLE_LOOP,                  /* Interrupted task. */ \
        0,                          /* Resource level counter. */ \
        0                           /* Number of activations (run-time value). */, \
        { \
            OS_FALSE  /* Task is not auto-started. */ \
        }, \
        { \
            OS_TRUE \
        }, \
        MainFunctionTask3_1ms_PRIO,                       /* Task priority. */ \
        OS_TASKPREEMPTION_FULL,                           /* Task schedule type. */ \
        1,                                                /* Maximum number of parallel        \
                                                           * activation requests. */ \
        OS_FALSE,                                         /* Indicate that the task interrupted */ \
        Os_TaskInternal_MainFunctionTask3_1ms,            /* Task function. */ \
        2,                                                /* Associated measurement raster to be \
                                                           * invoked before the task invocation */ \
        1,                                                /* Associated measurement raster to be \
                                                           * invoked after the task invocation */ \
        &(g_NumberOfTaskOverruns[MainFunctionTask3_1ms]), /* Associated overrun counter. */ \
        OS_TRUE,                                          /* Termination flag */ \
        "MainFunctionTask3_1ms",                          /* Task name. */ \
        MainFunctionTask3_1ms,                            /* Task id */ \
        OS_READYTASKS_INVALID_IDX,                        /* Ready-tasks heap index */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION               /* No application specified. */ \
    }, \
    { /* Task0_10ms */ \
        16384,               /* Stack size. */ \
        Task0_10ms_PRIO,     /* Actual priority. */ \
        SUSPENDED,           /* Task state. */ \
        OS_FALSE,            /* Task is basic task. */ \
        ((EventMaskType) 0), /* Events that are set (run-time value). */ \
        ((EventMaskType) 0), /* Events waiting for (run-time value). */ \
        0,                   /* Activation order. */ \
        IDLE_LOOP,           /* Interrupted task. */ \
        0,                   /* Resource level counter. */ \
        0                    /* Number of activations (run-time value). */, \
        { \
            OS_FALSE  /* Task is not auto-started. */ \
        }, \
        { \
            OS_TRUE \
        }, \
        Task0_10ms_PRIO,                       /* Task priority. */ \
        OS_TASKPREEMPTION_FULL,                /* Task schedule type. */ \
        1,                                     /* Maximum number of parallel activation requests. */\
        OS_FALSE,                              /* Indicate that the task interrupted */ \
        Os_TaskInternal_Task0_10ms,            /* Task function. */ \
        4,                                     /* Associated measurement raster to be invoked  \
                                                * before the task invocation */ \
        3,                                     /* Associated measurement raster to be invoked  \
                                                * after the task invocation */ \
        &(g_NumberOfTaskOverruns[Task0_10ms]), /* Associated overrun counter. */ \
        OS_TRUE,                               /* Termination flag */ \
        "Task0_10ms",                          /* Task name. */ \
        Task0_10ms,                            /* Task id */ \
        OS_READYTASKS_INVALID_IDX,             /* Ready-tasks heap index */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION    /* No application specified. */ \
    }, \
    { /* Task1 */ \
        16384,               /* Stack size. */ \
        Task1_PRIO,          /* Actual priority. */ \
        SUSPENDED,           /* Task state. */ \
        OS_TRUE,             /* Task is extended task. */ \
        ((EventMaskType) 0), /* Events that are set (run-time value). */ \
        ((EventMaskType) 0), /* Events waiting for (run-time value). */ \
        0,                   /* Activation order. */ \
        IDLE_LOOP,           /* Interrupted task. */ \
        0,                   /* Resource level counter. */ \
        0                    /* Number of activations (run-time value). */, \
        { \
            OS_FALSE  /* Task is not auto-started. */ \
        }, \
        { \
            OS_TRUE \
        }, \
        Task1_PRIO,                          /* Task priority. */ \
        OS_TASKPREEMPTION_FULL,              /* Task schedule type. */ \
        1,                                   /* Maximum number of parallel activation requests. */ \
        OS_FALSE,                            /* Indicate that the task interrupted */ \
        Os_TaskInternal_Task1,               /* Task function. */ \
        0,                                   /* Associated measurement raster to be invoked    \
                                              * before the task invocation */ \
        0,                                   /* Associated measurement raster to be invoked    \
                                              * after the task invocation */ \
        &(g_NumberOfTaskOverruns[Task1]),    /* Associated overrun counter. */ \
        OS_TRUE,                             /* Termination flag */ \
        "Task1",                             /* Task name. */ \
        Task1,                               /* Task id */ \
        OS_READYTASKS_INVALID_IDX,           /* Ready-tasks heap index */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION  /* No application specified. */ \
    }, \
    { /* IDLE_LOOP */ \
        16384,               /* Stack size. */ \
        IDLE_LOOP_PRIO,      /* Actual priority. */ \
        SUSPENDED,           /* Task state. */ \
        OS_FALSE,            /* Task is basic task. */ \
        ((EventMaskType) 0), /* Events that are set (run-time value). */ \
        ((EventMaskType) 0), /* Events waiting for (run-time value). */ \
        0,                   /* Activation order. */ \
        IDLE_LOOP,           /* Interrupted task. */ \
        0,                   /* Resource level counter. */ \
        0                    /* Number of activations (run-time value). */, \
        { \
            OS_FALSE  /* Task is not auto-started. */ \
        }, \
        { \
            OS_TRUE \
        }, \
        IDLE_LOOP_PRIO,                       /* Task priority. */ \
        IDLE_LOOP_SCHEDULE,                   /* Task schedule type. */ \
        IDLE_LOOP_ACTIVATION,                 /* Maximum number of parallel activation requests. */\
        OS_FALSE,                             /* Indicate that the task interrupted */ \
        Os_TaskInternal_IDLE_LOOP,            /* Task function. */ \
        0,                                    /* Associated measurement raster to be invoked   \
                                               * before the task invocation */ \
        0,                                    /* Associated measurement raster to be invoked   \
                                               * after the task invocation */ \
        &(g_NumberOfTaskOverruns[IDLE_LOOP]), /* Associated overrun counter. */ \
        OS_TRUE,                              /* Termination flag */ \
        "IDLE_LOOP",                          /* Task name. */ \
        IDLE_LOOP,                            /* Task id */ \
        OS_READYTASKS_INVALID_IDX,            /* Ready-tasks heap index */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION   /* No application specified. */ \
    } \
}

/* Alarm control block. */
#define OS_ALARM_CONTROL_BLOCK  \
{ \
    { /* Rte_OsAlarm_Cyclic_MainFunctionTask3_1ms */ \
        SystemTimer,                         /* ID of counter 'SystemTimer' which triggers this \
                                              * alarm */ \
        ((TickType) 0),                      /* Alarm general offset. */ \
        OS_FALSE,                            /* Is started? */ \
        ((TickType) 0),                      /* Next occurrence of alarm. */ \
        ((TickType) 0),                      /* Alarm cycle time in counter ticks. */ \
        OS_ALARMACTION_ACTIVATETASK,         /* Alarm action. */ \
        ((TaskType) MainFunctionTask3_1ms),  /* ID of task '1' activated by this alarm. */ \
        ((EventMaskType) 0),                 /* No event mask. */ \
        ((CounterType) -1),                  /* No counter increment */ \
        OS_NULL,                             /* Callback function. */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION  /* No application specified. */ \
    }, \
    { /* Rte_OsAlarm_Cyclic_Task0_10ms */ \
        SystemTimer,                         /* ID of counter 'SystemTimer' which triggers this \
                                              * alarm */ \
        ((TickType) 0),                      /* Alarm general offset. */ \
        OS_FALSE,                            /* Is started? */ \
        ((TickType) 0),                      /* Next occurrence of alarm. */ \
        ((TickType) 0),                      /* Alarm cycle time in counter ticks. */ \
        OS_ALARMACTION_ACTIVATETASK,         /* Alarm action. */ \
        ((TaskType) Task0_10ms),             /* ID of task '2' activated by this alarm. */ \
        ((EventMaskType) 0),                 /* No event mask. */ \
        ((CounterType) -1),                  /* No counter increment */ \
        OS_NULL,                             /* Callback function. */ \
        OS_NOT_CONNECTED_TO_ANY_APPLICATION  /* No application specified. */ \
    } \
}

/* Counter control block. */
#define OS_COUNTER_CONTROL_BLOCK  \
{ \
    { /* SystemTimer */ \
        ((TickType) 0),                             /* Counter value. */ \
        ((TickType) 0),                             /* Old simulation time (per sub system) */ \
        ((TickType) OSMAXALLOWEDVALUE_SystemTimer), /* OSMAXALLOWEDVALUE_SystemTimer */ \
        ((TickType) OSMINCYCLE_SystemTimer),        /* OSMINCYCLE_SystemTimer */ \
        ((TickType) OSTICKSPERBASE_SystemTimer)     /* OSTICKSPERBASE_SystemTimer */, \
        { \
            OS_TRUE, /* Alarm 'Rte_OsAlarm_Cyclic_MainFunctionTask3_1ms' connected to this     \
                      * counter. */ \
            OS_TRUE  /* Alarm 'Rte_OsAlarm_Cyclic_Task0_10ms' connected to this counter. */ \
        }, \
        OS_FALSE,            /* Is initialized? */ \
        0,                   /* Counter is not connected to any schedule table */ \
        OS_COUNTER_HARDWARE, /* The counter driver */ \
        1                    /* Multiple of simulation base time */ \
    } \
}

/* Resource control block. */
#define OS_RESOURCE_CONTROL_BLOCK  \
{ \
    { /* Definition for resource RES_SCHEDULER */ \
        OS_TASKPRIORITY_MAX,  /* Resource priority. The scheduler can be obtained to acquire the \
                               * highest task priority. */ \
        ((Os_PrioType) 0),    /* Replaced priority. */ \
        OS_RESOURCE_STANDARD, /* Resource property. */ \
        OS_FALSE,             /* Is occupied? */ \
        IDLE_LOOP,            /* Owner task. */ \
        0                     /* Resource level counter. */ \
    } \
}

/* Interrupt service routine (ISR) control block. */
#define OS_ISR_CONTROL_BLOCK  \
{ \
    { \
        Os_TaskInternal_IDLE_LOOP  /* Interrupt service routine for idle loop. */ \
    } \
}

/* Hardware counter list */
#define OS_HARDWARE_COUNTER  \
{ \
    ((CounterType) 0)  /* Id of hardware counter SystemTimer */ \
}

/*------------------------------------------------------------------------------------------------*\
  FUNCTION PROTOTYPES
\*------------------------------------------------------------------------------------------------*/

/* OS tasks forward declarations. */
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */ 
/* OS task function forward declarations. */
extern void Os_TaskInternal_IDLE_LOOP(void);
extern void Os_TaskInternal_EcuM_StartupTwoTask(void);
extern void Os_Task_EcuM_StartupTwoTask(void);
extern void Os_TaskInternal_MainFunctionTask3_1ms(void);
extern void Os_Task_MainFunctionTask3_1ms(void);
extern void Os_TaskInternal_Task0_10ms(void);
extern void Os_Task_Task0_10ms(void);
extern void Os_TaskInternal_Task1(void);
extern void Os_Task_Task1(void);
#ifdef __cplusplus
}
#endif /* __cplusplus */ 


#endif /* OS_CFG_GENERATED_H */
/*------------------------------------------------------------------------------------------------*\
  END OF FILE
\*------------------------------------------------------------------------------------------------*/
